import {
  __commonJS,
  __publicField
} from "./chunk-Y4AOG3KG.js";

// browser-external:url
var require_url = __commonJS({
  "browser-external:url"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "url" has been externalized for browser compatibility. Cannot access "url.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/axios/dist/browser/axios.cjs
var require_axios = __commonJS({
  "node_modules/axios/dist/browser/axios.cjs"(exports, module) {
    "use strict";
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString } = Object.prototype;
    var { getPrototypeOf } = Object;
    var kindOf = ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    var typeOfTest = (type) => (thing) => typeof thing === type;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream = (val) => isObject(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined")
        return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }
    var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    var stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing)
        return null;
      if (isArray(thing))
        return thing;
      let i = thing.length;
      if (!isNumber(i))
        return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        if (reducer(descriptor, name, obj) !== false) {
          reducedDescriptors[name] = descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value))
          return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      value = +value;
      return Number.isFinite(value) ? value : defaultValue;
    };
    var ALPHA = "abcdefghijklmnopqrstuvwxyz";
    var DIGIT = "0123456789";
    var ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var utils = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable
    };
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils.toJSONObject(this.config),
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    var httpAdapter = null;
    function isVisitable(thing) {
      return utils.isPlainObject(thing) || utils.isArray(thing);
    }
    function removeBrackets(key) {
      return utils.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path)
        return key;
      return path.concat(key).map(function each(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new FormData();
      options = utils.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils.isSpecCompliantForm(formData);
      if (!utils.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils.isArray(value) && isFlatArray(value) || (utils.isFileList(value) || utils.endsWith(key, "[]")) && (arr = utils.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index) {
              !(utils.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path) {
        if (utils.isUndefined(value))
          return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils.forEach(value, function each(el, key) {
          const result = !(utils.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url, params, options) {
      if (!params) {
        return url;
      }
      const _encode = options && options.encode || encode;
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
    var FormData$1 = typeof FormData !== "undefined" ? FormData : null;
    var Blob$1 = typeof Blob !== "undefined" ? Blob : null;
    var isStandardBrowserEnv = (() => {
      let product;
      if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    })();
    var isStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var platform = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      isStandardBrowserEnv,
      isStandardBrowserWebWorkerEnv,
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath(name) {
      return utils.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index) {
        let name = path[index++];
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path, value, target[name], index);
        if (result && utils.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {
        const obj = {};
        utils.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": void 0
    };
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils.isObject(data);
        if (isObjectPayload && utils.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils.isFormData(data);
        if (isFormData2) {
          if (!hasJSONContentType) {
            return data;
          }
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (data && utils.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    var defaults$1 = defaults;
    var ignoreDuplicateOf = utils.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
      if (utils.isFunction(filter)) {
        return filter.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils.isString(value))
        return;
      if (utils.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }
      if (utils.isRegExp(filter)) {
        return filter.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils.forEach(this, (value, header) => {
          const key = utils.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils.freezeMethods(AxiosHeaders.prototype);
    utils.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    var cookies = platform.isStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            const cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
    function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var isURLSameOrigin = platform.isStandardBrowserEnv ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        const msie = /(msie|trident)/i.test(navigator.userAgent);
        const urlParsingNode = document.createElement("a");
        let originURL;
        function resolveURL(url) {
          let href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin2(requestURL) {
          const parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin2() {
          return true;
        };
      }()
    );
    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min = min !== void 0 ? min : 1e3;
      return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now - firstSampleTS < min) {
          return;
        }
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function progressEventReducer(listener, isDownloadStream) {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return (e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e
        };
        data[isDownloadStream ? "download" : "upload"] = true;
        listener(data);
      };
    }
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        let requestData = config.data;
        const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();
        const responseType = config.responseType;
        let onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          if (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv) {
            requestHeaders.setContentType(false);
          } else {
            requestHeaders.setContentType("multipart/form-data;", false);
          }
        }
        let request = new XMLHttpRequest();
        if (config.auth) {
          const username = config.auth.username || "";
          const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
        }
        const fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (platform.isStandardBrowserEnv) {
          const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName && cookies.read(config.xsrfCookieName);
          if (xsrfValue) {
            requestHeaders.set(config.xsrfHeaderName, xsrfValue);
          }
        }
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
        }
        if (config.cancelToken || config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(fullPath);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter
    };
    utils.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          if (adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
            break;
          }
        }
        if (!adapter) {
          if (adapter === false) {
            throw new AxiosError(
              `Adapter ${nameOrAdapter} is not supported by the environment`,
              "ERR_NOT_SUPPORT"
            );
          }
          throw new Error(
            utils.hasOwnProp(knownAdapters, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`
          );
        }
        if (!utils.isFunction(adapter)) {
          throw new TypeError("adapter is not a function");
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, caseless) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge.call({ caseless }, target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a, b, caseless) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(a, b, caseless);
        } else if (!utils.isUndefined(a)) {
          return getMergedValue(void 0, a, caseless);
        }
      }
      function valueFromConfig2(a, b) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a, b) {
        if (!utils.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils.isUndefined(a)) {
          return getMergedValue(void 0, a);
        }
      }
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
      };
      utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var VERSION = "1.4.0";
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
      validators$1[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders;
        contextHeaders = headers && utils.merge(
          headers.common,
          headers[config.method]
        );
        contextHeaders && utils.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners)
            return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module.exports = axios;
  }
});

// node_modules/form-data/lib/browser.js
var require_browser = __commonJS({
  "node_modules/form-data/lib/browser.js"(exports, module) {
    module.exports = typeof self == "object" ? self.FormData : window.FormData;
  }
});

// node_modules/node-appwrite/lib/exception.js
var require_exception = __commonJS({
  "node_modules/node-appwrite/lib/exception.js"(exports, module) {
    var AppwriteException = class extends Error {
      constructor(message, code, type, response) {
        super(message);
        this.code = code;
        this.type = type;
        this.response = response;
      }
    };
    module.exports = AppwriteException;
  }
});

// node_modules/node-appwrite/lib/client.js
var require_client = __commonJS({
  "node_modules/node-appwrite/lib/client.js"(exports, module) {
    var URL = require_url().URL;
    var axios = require_axios();
    var FormData2 = require_browser();
    var AppwriteException = require_exception();
    var _Client = class {
      // 5MB
      constructor() {
        this.endpoint = "https://HOSTNAME/v1";
        this.headers = {
          "accept-encoding": "*",
          "content-type": "",
          "x-sdk-name": "Node.js",
          "x-sdk-platform": "server",
          "x-sdk-language": "nodejs",
          "x-sdk-version": "9.0.0",
          "X-Appwrite-Response-Format": "1.0.0"
        };
        this.selfSigned = false;
      }
      /**
       * Set Project
       *
       * Your project ID
       *
       * @param {string} project
       *
       * @return self
       */
      setProject(project) {
        this.addHeader("X-Appwrite-Project", project);
        return this;
      }
      /**
       * Set Key
       *
       * Your secret API key
       *
       * @param {string} key
       *
       * @return self
       */
      setKey(key) {
        this.addHeader("X-Appwrite-Key", key);
        return this;
      }
      /**
       * Set JWT
       *
       * Your secret JSON Web Token
       *
       * @param {string} jwt
       *
       * @return self
       */
      setJWT(jwt) {
        this.addHeader("X-Appwrite-JWT", jwt);
        return this;
      }
      /**
       * Set Locale
       *
       * @param {string} locale
       *
       * @return self
       */
      setLocale(locale) {
        this.addHeader("X-Appwrite-Locale", locale);
        return this;
      }
      /**
       * Set self signed.
       *
       * @param {bool} status
       *
       * @return this
       */
      setSelfSigned(status = true) {
        this.selfSigned = status;
        return this;
      }
      /**
       * Set endpoint.
       *
       * @param {string} endpoint
       *
       * @return this
       */
      setEndpoint(endpoint) {
        this.endpoint = endpoint;
        return this;
      }
      /**
       * @param {string} key
       * @param {string} value
       */
      addHeader(key, value) {
        this.headers[key.toLowerCase()] = value;
        return this;
      }
      async call(method, path = "", headers = {}, params = {}, responseType = "json") {
        if (this.selfSigned) {
          process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
        }
        headers = Object.assign({}, this.headers, headers);
        let contentType = headers["content-type"].toLowerCase();
        let formData = null;
        if (contentType.startsWith("multipart/form-data")) {
          const form = new FormData2();
          let flatParams = _Client.flatten(params);
          for (const key in flatParams) {
            const value = flatParams[key];
            if (value && value.type && value.type === "file") {
              form.append(key, value.file, { filename: value.filename });
            } else {
              form.append(key, flatParams[key]);
            }
          }
          headers = {
            ...headers,
            ...form.getHeaders()
          };
          formData = form;
        }
        let options = {
          method: method.toUpperCase(),
          url: this.endpoint + path,
          params: method.toUpperCase() === "GET" ? params : {},
          headers,
          data: method.toUpperCase() === "GET" || contentType.startsWith("multipart/form-data") ? formData : params,
          json: contentType.startsWith("application/json"),
          responseType
        };
        try {
          let response = await axios(options);
          return response.data;
        } catch (error) {
          if ("response" in error && error.response !== void 0) {
            if (error.response && "data" in error.response) {
              if (typeof error.response.data === "string") {
                throw new AppwriteException(error.response.data, error.response.status, "", error.response.data);
              } else {
                throw new AppwriteException(error.response.data.message, error.response.status, error.response.data.type, error.response.data);
              }
            } else {
              throw new AppwriteException(error.response.statusText, error.response.status, error.response.data);
            }
          } else {
            throw new AppwriteException(error.message);
          }
        }
      }
      static flatten(data, prefix = "") {
        let output = {};
        for (const key in data) {
          let value = data[key];
          let finalKey = prefix ? prefix + "[" + key + "]" : key;
          if (Array.isArray(value)) {
            output = Object.assign(output, _Client.flatten(value, finalKey));
          } else {
            output[finalKey] = value;
          }
        }
        return output;
      }
    };
    var Client = _Client;
    __publicField(Client, "CHUNK_SIZE", 5 * 1024 * 1024);
    module.exports = Client;
  }
});

// node_modules/node-appwrite/lib/query.js
var require_query = __commonJS({
  "node_modules/node-appwrite/lib/query.js"(exports, module) {
    var _Query = class {
    };
    var Query = _Query;
    __publicField(Query, "equal", (attribute, value) => _Query.addQuery(attribute, "equal", value));
    __publicField(Query, "notEqual", (attribute, value) => _Query.addQuery(attribute, "notEqual", value));
    __publicField(Query, "lessThan", (attribute, value) => _Query.addQuery(attribute, "lessThan", value));
    __publicField(Query, "lessThanEqual", (attribute, value) => _Query.addQuery(attribute, "lessThanEqual", value));
    __publicField(Query, "greaterThan", (attribute, value) => _Query.addQuery(attribute, "greaterThan", value));
    __publicField(Query, "greaterThanEqual", (attribute, value) => _Query.addQuery(attribute, "greaterThanEqual", value));
    __publicField(Query, "isNull", (attribute) => `isNull("${attribute}")`);
    __publicField(Query, "isNotNull", (attribute) => `isNotNull("${attribute}")`);
    __publicField(Query, "between", (attribute, start, end) => _Query.addQuery(attribute, "between", [start, end]));
    __publicField(Query, "startsWith", (attribute, value) => _Query.addQuery(attribute, "startsWith", value));
    __publicField(Query, "endsWith", (attribute, value) => _Query.addQuery(attribute, "endsWith", value));
    __publicField(Query, "select", (attributes) => `select([${attributes.map((attr) => `"${attr}"`).join(",")}])`);
    __publicField(Query, "search", (attribute, value) => _Query.addQuery(attribute, "search", value));
    __publicField(Query, "orderDesc", (attribute) => `orderDesc("${attribute}")`);
    __publicField(Query, "orderAsc", (attribute) => `orderAsc("${attribute}")`);
    __publicField(Query, "cursorAfter", (documentId) => `cursorAfter("${documentId}")`);
    __publicField(Query, "cursorBefore", (documentId) => `cursorBefore("${documentId}")`);
    __publicField(Query, "limit", (limit) => `limit(${limit})`);
    __publicField(Query, "offset", (offset) => `offset(${offset})`);
    __publicField(Query, "addQuery", (attribute, method, value) => value instanceof Array ? `${method}("${attribute}", [${value.map((v) => _Query.parseValues(v)).join(",")}])` : `${method}("${attribute}", [${_Query.parseValues(value)}])`);
    __publicField(Query, "parseValues", (value) => typeof value === "string" || value instanceof String ? `"${value}"` : `${value}`);
    module.exports = Query;
  }
});

// node_modules/node-appwrite/lib/permission.js
var require_permission = __commonJS({
  "node_modules/node-appwrite/lib/permission.js"(exports, module) {
    var Permission = class {
    };
    __publicField(Permission, "read", (role) => {
      return `read("${role}")`;
    });
    __publicField(Permission, "write", (role) => {
      return `write("${role}")`;
    });
    __publicField(Permission, "create", (role) => {
      return `create("${role}")`;
    });
    __publicField(Permission, "update", (role) => {
      return `update("${role}")`;
    });
    __publicField(Permission, "delete", (role) => {
      return `delete("${role}")`;
    });
    module.exports = Permission;
  }
});

// node_modules/node-appwrite/lib/role.js
var require_role = __commonJS({
  "node_modules/node-appwrite/lib/role.js"(exports, module) {
    var Role = class {
    };
    __publicField(Role, "any", () => {
      return "any";
    });
    __publicField(Role, "user", (id, status = "") => {
      if (status === "") {
        return `user:${id}`;
      }
      return `user:${id}/${status}`;
    });
    __publicField(Role, "users", (status = "") => {
      if (status === "") {
        return "users";
      }
      return `users/${status}`;
    });
    __publicField(Role, "guests", () => {
      return "guests";
    });
    __publicField(Role, "team", (id, role = "") => {
      if (role === "") {
        return "team:" + id;
      }
      return "team:" + id + "/" + role;
    });
    __publicField(Role, "member", (id) => {
      return "member:" + id;
    });
    module.exports = Role;
  }
});

// node_modules/node-appwrite/lib/id.js
var require_id = __commonJS({
  "node_modules/node-appwrite/lib/id.js"(exports, module) {
    var ID = class {
    };
    __publicField(ID, "unique", () => {
      return "unique()";
    });
    __publicField(ID, "custom", (id) => {
      return id;
    });
    module.exports = ID;
  }
});

// browser-external:stream
var require_stream = __commonJS({
  "browser-external:stream"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "stream" has been externalized for browser compatibility. Cannot access "stream.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/node-appwrite/lib/inputFile.js
var require_inputFile = __commonJS({
  "node_modules/node-appwrite/lib/inputFile.js"(exports, module) {
    var { Readable } = require_stream();
    var fs = require_fs();
    var _InputFile = class {
      constructor(stream, filename, size) {
        __publicField(this, "stream");
        // Content of file, readable stream
        __publicField(this, "size");
        // Total final size of the file content
        __publicField(this, "filename");
        this.stream = stream;
        this.filename = filename;
        this.size = size;
      }
    };
    var InputFile = _InputFile;
    // File name
    __publicField(InputFile, "fromPath", (filePath, filename) => {
      const stream = fs.createReadStream(filePath);
      const { size } = fs.statSync(filePath);
      return new _InputFile(stream, filename, size);
    });
    __publicField(InputFile, "fromBuffer", (buffer, filename) => {
      const stream = Readable.from(buffer);
      const size = Buffer.byteLength(buffer);
      return new _InputFile(stream, filename, size);
    });
    __publicField(InputFile, "fromBlob", async (blob, filename) => {
      const arrayBuffer = await blob.arrayBuffer();
      const buffer = Buffer.from(arrayBuffer);
      return _InputFile.fromBuffer(buffer, filename);
    });
    __publicField(InputFile, "fromStream", (stream, filename, size) => {
      return new _InputFile(stream, filename, size);
    });
    __publicField(InputFile, "fromPlainText", (content, filename) => {
      const buffer = Buffer.from(content, "utf-8");
      const stream = Readable.from(buffer);
      const size = Buffer.byteLength(buffer);
      return new _InputFile(stream, filename, size);
    });
    module.exports = InputFile;
  }
});

// node_modules/node-appwrite/lib/service.js
var require_service = __commonJS({
  "node_modules/node-appwrite/lib/service.js"(exports, module) {
    var Service = class {
      /**
       * @param client
       */
      constructor(client) {
        this.client = client;
      }
    };
    module.exports = Service;
  }
});

// browser-external:util
var require_util = __commonJS({
  "browser-external:util"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "util" has been externalized for browser compatibility. Cannot access "util.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/node-appwrite/lib/services/account.js
var require_account = __commonJS({
  "node_modules/node-appwrite/lib/services/account.js"(exports, module) {
    var Service = require_service();
    var AppwriteException = require_exception();
    var InputFile = require_inputFile();
    var client = require_client();
    var Stream = require_stream();
    var { promisify } = require_util();
    var fs = require_fs();
    var Account = class extends Service {
      constructor(client2) {
        super(client2);
      }
      /**
       * Get Account
       *
       * Get currently logged in user data as JSON object.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async get() {
        let path = "/account";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Email
       *
       * Update currently logged in user account email address. After changing user
       * address, the user confirmation status will get reset. A new confirmation
       * email is not sent automatically however you can use the send confirmation
       * email endpoint again to send the confirmation email. For security measures,
       * user password is required to complete this request.
       * This endpoint can also be used to convert an anonymous account to a normal
       * one, by passing an email address and a new password.
       * 
       *
       * @param {string} email
       * @param {string} password
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateEmail(email, password) {
        let path = "/account/email";
        let payload = {};
        if (typeof email === "undefined") {
          throw new AppwriteException('Missing required parameter: "email"');
        }
        if (typeof password === "undefined") {
          throw new AppwriteException('Missing required parameter: "password"');
        }
        if (typeof email !== "undefined") {
          payload["email"] = email;
        }
        if (typeof password !== "undefined") {
          payload["password"] = password;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Logs
       *
       * Get currently logged in user list of latest security activity logs. Each
       * log returns user IP address, location and date and time of log.
       *
       * @param {string[]} queries
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listLogs(queries) {
        let path = "/account/logs";
        let payload = {};
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Name
       *
       * Update currently logged in user account name.
       *
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateName(name) {
        let path = "/account/name";
        let payload = {};
        if (typeof name === "undefined") {
          throw new AppwriteException('Missing required parameter: "name"');
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Password
       *
       * Update currently logged in user password. For validation, user is required
       * to pass in the new password, and the old password. For users created with
       * OAuth, Team Invites and Magic URL, oldPassword is optional.
       *
       * @param {string} password
       * @param {string} oldPassword
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updatePassword(password, oldPassword) {
        let path = "/account/password";
        let payload = {};
        if (typeof password === "undefined") {
          throw new AppwriteException('Missing required parameter: "password"');
        }
        if (typeof password !== "undefined") {
          payload["password"] = password;
        }
        if (typeof oldPassword !== "undefined") {
          payload["oldPassword"] = oldPassword;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Phone
       *
       * Update the currently logged in user's phone number. After updating the
       * phone number, the phone verification status will be reset. A confirmation
       * SMS is not sent automatically, however you can use the [POST
       * /account/verification/phone](/docs/client/account#accountCreatePhoneVerification)
       * endpoint to send a confirmation SMS.
       *
       * @param {string} phone
       * @param {string} password
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updatePhone(phone, password) {
        let path = "/account/phone";
        let payload = {};
        if (typeof phone === "undefined") {
          throw new AppwriteException('Missing required parameter: "phone"');
        }
        if (typeof password === "undefined") {
          throw new AppwriteException('Missing required parameter: "password"');
        }
        if (typeof phone !== "undefined") {
          payload["phone"] = phone;
        }
        if (typeof password !== "undefined") {
          payload["password"] = password;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Account Preferences
       *
       * Get currently logged in user preferences as a key-value object.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getPrefs() {
        let path = "/account/prefs";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Preferences
       *
       * Update currently logged in user account preferences. The object you pass is
       * stored as is, and replaces any previous value. The maximum allowed prefs
       * size is 64kB and throws error if exceeded.
       *
       * @param {object} prefs
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updatePrefs(prefs) {
        let path = "/account/prefs";
        let payload = {};
        if (typeof prefs === "undefined") {
          throw new AppwriteException('Missing required parameter: "prefs"');
        }
        if (typeof prefs !== "undefined") {
          payload["prefs"] = prefs;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Password Recovery
       *
       * Sends the user an email with a temporary secret key for password reset.
       * When the user clicks the confirmation link he is redirected back to your
       * app password reset URL with the secret key and email address values
       * attached to the URL query string. Use the query string params to submit a
       * request to the [PUT
       * /account/recovery](/docs/client/account#accountUpdateRecovery) endpoint to
       * complete the process. The verification link sent to the user's email
       * address is valid for 1 hour.
       *
       * @param {string} email
       * @param {string} url
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createRecovery(email, url) {
        let path = "/account/recovery";
        let payload = {};
        if (typeof email === "undefined") {
          throw new AppwriteException('Missing required parameter: "email"');
        }
        if (typeof url === "undefined") {
          throw new AppwriteException('Missing required parameter: "url"');
        }
        if (typeof email !== "undefined") {
          payload["email"] = email;
        }
        if (typeof url !== "undefined") {
          payload["url"] = url;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Password Recovery (confirmation)
       *
       * Use this endpoint to complete the user account password reset. Both the
       * **userId** and **secret** arguments will be passed as query parameters to
       * the redirect URL you have provided when sending your request to the [POST
       * /account/recovery](/docs/client/account#accountCreateRecovery) endpoint.
       * 
       * Please note that in order to avoid a [Redirect
       * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)
       * the only valid redirect URLs are the ones from domains you have set when
       * adding your platforms in the console interface.
       *
       * @param {string} userId
       * @param {string} secret
       * @param {string} password
       * @param {string} passwordAgain
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateRecovery(userId, secret, password, passwordAgain) {
        let path = "/account/recovery";
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof secret === "undefined") {
          throw new AppwriteException('Missing required parameter: "secret"');
        }
        if (typeof password === "undefined") {
          throw new AppwriteException('Missing required parameter: "password"');
        }
        if (typeof passwordAgain === "undefined") {
          throw new AppwriteException('Missing required parameter: "passwordAgain"');
        }
        if (typeof userId !== "undefined") {
          payload["userId"] = userId;
        }
        if (typeof secret !== "undefined") {
          payload["secret"] = secret;
        }
        if (typeof password !== "undefined") {
          payload["password"] = password;
        }
        if (typeof passwordAgain !== "undefined") {
          payload["passwordAgain"] = passwordAgain;
        }
        return await this.client.call("put", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Sessions
       *
       * Get currently logged in user list of active sessions across different
       * devices.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listSessions() {
        let path = "/account/sessions";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete Sessions
       *
       * Delete all sessions from the user account and remove any sessions cookies
       * from the end client.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async deleteSessions() {
        let path = "/account/sessions";
        let payload = {};
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Session
       *
       * Use this endpoint to get a logged in user's session using a Session ID.
       * Inputting 'current' will return the current session being used.
       *
       * @param {string} sessionId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getSession(sessionId) {
        let path = "/account/sessions/{sessionId}".replace("{sessionId}", sessionId);
        let payload = {};
        if (typeof sessionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "sessionId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update OAuth Session (Refresh Tokens)
       *
       * Access tokens have limited lifespan and expire to mitigate security risks.
       * If session was created using an OAuth provider, this route can be used to
       * "refresh" the access token.
       *
       * @param {string} sessionId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateSession(sessionId) {
        let path = "/account/sessions/{sessionId}".replace("{sessionId}", sessionId);
        let payload = {};
        if (typeof sessionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "sessionId"');
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete Session
       *
       * Use this endpoint to log out the currently logged in user from all their
       * account sessions across all of their different devices. When using the
       * Session ID argument, only the unique session ID provided is deleted.
       * 
       *
       * @param {string} sessionId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async deleteSession(sessionId) {
        let path = "/account/sessions/{sessionId}".replace("{sessionId}", sessionId);
        let payload = {};
        if (typeof sessionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "sessionId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Status
       *
       * Block the currently logged in user account. Behind the scene, the user
       * record is not deleted but permanently blocked from any access. To
       * completely delete a user, use the Users API instead.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateStatus() {
        let path = "/account/status";
        let payload = {};
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Email Verification
       *
       * Use this endpoint to send a verification message to your user email address
       * to confirm they are the valid owners of that address. Both the **userId**
       * and **secret** arguments will be passed as query parameters to the URL you
       * have provided to be attached to the verification email. The provided URL
       * should redirect the user back to your app and allow you to complete the
       * verification process by verifying both the **userId** and **secret**
       * parameters. Learn more about how to [complete the verification
       * process](/docs/client/account#accountUpdateEmailVerification). The
       * verification link sent to the user's email address is valid for 7 days.
       * 
       * Please note that in order to avoid a [Redirect
       * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md),
       * the only valid redirect URLs are the ones from domains you have set when
       * adding your platforms in the console interface.
       * 
       *
       * @param {string} url
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createVerification(url) {
        let path = "/account/verification";
        let payload = {};
        if (typeof url === "undefined") {
          throw new AppwriteException('Missing required parameter: "url"');
        }
        if (typeof url !== "undefined") {
          payload["url"] = url;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Email Verification (confirmation)
       *
       * Use this endpoint to complete the user email verification process. Use both
       * the **userId** and **secret** parameters that were attached to your app URL
       * to verify the user email ownership. If confirmed this route will return a
       * 200 status code.
       *
       * @param {string} userId
       * @param {string} secret
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateVerification(userId, secret) {
        let path = "/account/verification";
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof secret === "undefined") {
          throw new AppwriteException('Missing required parameter: "secret"');
        }
        if (typeof userId !== "undefined") {
          payload["userId"] = userId;
        }
        if (typeof secret !== "undefined") {
          payload["secret"] = secret;
        }
        return await this.client.call("put", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Phone Verification
       *
       * Use this endpoint to send a verification SMS to the currently logged in
       * user. This endpoint is meant for use after updating a user's phone number
       * using the [accountUpdatePhone](/docs/client/account#accountUpdatePhone)
       * endpoint. Learn more about how to [complete the verification
       * process](/docs/client/account#accountUpdatePhoneVerification). The
       * verification code sent to the user's phone number is valid for 15 minutes.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createPhoneVerification() {
        let path = "/account/verification/phone";
        let payload = {};
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Phone Verification (confirmation)
       *
       * Use this endpoint to complete the user phone verification process. Use the
       * **userId** and **secret** that were sent to your user's phone number to
       * verify the user email ownership. If confirmed this route will return a 200
       * status code.
       *
       * @param {string} userId
       * @param {string} secret
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updatePhoneVerification(userId, secret) {
        let path = "/account/verification/phone";
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof secret === "undefined") {
          throw new AppwriteException('Missing required parameter: "secret"');
        }
        if (typeof userId !== "undefined") {
          payload["userId"] = userId;
        }
        if (typeof secret !== "undefined") {
          payload["secret"] = secret;
        }
        return await this.client.call("put", path, {
          "content-type": "application/json"
        }, payload);
      }
    };
    module.exports = Account;
  }
});

// node_modules/node-appwrite/lib/services/avatars.js
var require_avatars = __commonJS({
  "node_modules/node-appwrite/lib/services/avatars.js"(exports, module) {
    var Service = require_service();
    var AppwriteException = require_exception();
    var InputFile = require_inputFile();
    var client = require_client();
    var Stream = require_stream();
    var { promisify } = require_util();
    var fs = require_fs();
    var Avatars = class extends Service {
      constructor(client2) {
        super(client2);
      }
      /**
       * Get Browser Icon
       *
       * You can use this endpoint to show different browser icons to your users.
       * The code argument receives the browser code as it appears in your user [GET
       * /account/sessions](/docs/client/account#accountGetSessions) endpoint. Use
       * width, height and quality arguments to change the output settings.
       * 
       * When one dimension is specified and the other is 0, the image is scaled
       * with preserved aspect ratio. If both dimensions are 0, the API provides an
       * image at source quality. If dimensions are not specified, the default size
       * of image returned is 100x100px.
       *
       * @param {string} code
       * @param {number} width
       * @param {number} height
       * @param {number} quality
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getBrowser(code, width, height, quality) {
        let path = "/avatars/browsers/{code}".replace("{code}", code);
        let payload = {};
        if (typeof code === "undefined") {
          throw new AppwriteException('Missing required parameter: "code"');
        }
        if (typeof width !== "undefined") {
          payload["width"] = width;
        }
        if (typeof height !== "undefined") {
          payload["height"] = height;
        }
        if (typeof quality !== "undefined") {
          payload["quality"] = quality;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload, "arraybuffer");
      }
      /**
       * Get Credit Card Icon
       *
       * The credit card endpoint will return you the icon of the credit card
       * provider you need. Use width, height and quality arguments to change the
       * output settings.
       * 
       * When one dimension is specified and the other is 0, the image is scaled
       * with preserved aspect ratio. If both dimensions are 0, the API provides an
       * image at source quality. If dimensions are not specified, the default size
       * of image returned is 100x100px.
       * 
       *
       * @param {string} code
       * @param {number} width
       * @param {number} height
       * @param {number} quality
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getCreditCard(code, width, height, quality) {
        let path = "/avatars/credit-cards/{code}".replace("{code}", code);
        let payload = {};
        if (typeof code === "undefined") {
          throw new AppwriteException('Missing required parameter: "code"');
        }
        if (typeof width !== "undefined") {
          payload["width"] = width;
        }
        if (typeof height !== "undefined") {
          payload["height"] = height;
        }
        if (typeof quality !== "undefined") {
          payload["quality"] = quality;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload, "arraybuffer");
      }
      /**
       * Get Favicon
       *
       * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote
       * website URL.
       * 
       *
       * @param {string} url
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getFavicon(url) {
        let path = "/avatars/favicon";
        let payload = {};
        if (typeof url === "undefined") {
          throw new AppwriteException('Missing required parameter: "url"');
        }
        if (typeof url !== "undefined") {
          payload["url"] = url;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload, "arraybuffer");
      }
      /**
       * Get Country Flag
       *
       * You can use this endpoint to show different country flags icons to your
       * users. The code argument receives the 2 letter country code. Use width,
       * height and quality arguments to change the output settings. Country codes
       * follow the [ISO 3166-1](http://en.wikipedia.org/wiki/ISO_3166-1) standard.
       * 
       * When one dimension is specified and the other is 0, the image is scaled
       * with preserved aspect ratio. If both dimensions are 0, the API provides an
       * image at source quality. If dimensions are not specified, the default size
       * of image returned is 100x100px.
       * 
       *
       * @param {string} code
       * @param {number} width
       * @param {number} height
       * @param {number} quality
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getFlag(code, width, height, quality) {
        let path = "/avatars/flags/{code}".replace("{code}", code);
        let payload = {};
        if (typeof code === "undefined") {
          throw new AppwriteException('Missing required parameter: "code"');
        }
        if (typeof width !== "undefined") {
          payload["width"] = width;
        }
        if (typeof height !== "undefined") {
          payload["height"] = height;
        }
        if (typeof quality !== "undefined") {
          payload["quality"] = quality;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload, "arraybuffer");
      }
      /**
       * Get Image from URL
       *
       * Use this endpoint to fetch a remote image URL and crop it to any image size
       * you want. This endpoint is very useful if you need to crop and display
       * remote images in your app or in case you want to make sure a 3rd party
       * image is properly served using a TLS protocol.
       * 
       * When one dimension is specified and the other is 0, the image is scaled
       * with preserved aspect ratio. If both dimensions are 0, the API provides an
       * image at source quality. If dimensions are not specified, the default size
       * of image returned is 400x400px.
       * 
       *
       * @param {string} url
       * @param {number} width
       * @param {number} height
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getImage(url, width, height) {
        let path = "/avatars/image";
        let payload = {};
        if (typeof url === "undefined") {
          throw new AppwriteException('Missing required parameter: "url"');
        }
        if (typeof url !== "undefined") {
          payload["url"] = url;
        }
        if (typeof width !== "undefined") {
          payload["width"] = width;
        }
        if (typeof height !== "undefined") {
          payload["height"] = height;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload, "arraybuffer");
      }
      /**
       * Get User Initials
       *
       * Use this endpoint to show your user initials avatar icon on your website or
       * app. By default, this route will try to print your logged-in user name or
       * email initials. You can also overwrite the user name if you pass the 'name'
       * parameter. If no name is given and no user is logged, an empty avatar will
       * be returned.
       * 
       * You can use the color and background params to change the avatar colors. By
       * default, a random theme will be selected. The random theme will persist for
       * the user's initials when reloading the same theme will always return for
       * the same initials.
       * 
       * When one dimension is specified and the other is 0, the image is scaled
       * with preserved aspect ratio. If both dimensions are 0, the API provides an
       * image at source quality. If dimensions are not specified, the default size
       * of image returned is 100x100px.
       * 
       *
       * @param {string} name
       * @param {number} width
       * @param {number} height
       * @param {string} background
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getInitials(name, width, height, background) {
        let path = "/avatars/initials";
        let payload = {};
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        if (typeof width !== "undefined") {
          payload["width"] = width;
        }
        if (typeof height !== "undefined") {
          payload["height"] = height;
        }
        if (typeof background !== "undefined") {
          payload["background"] = background;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload, "arraybuffer");
      }
      /**
       * Get QR Code
       *
       * Converts a given plain text to a QR code image. You can use the query
       * parameters to change the size and style of the resulting image.
       * 
       *
       * @param {string} text
       * @param {number} size
       * @param {number} margin
       * @param {boolean} download
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getQR(text, size, margin, download) {
        let path = "/avatars/qr";
        let payload = {};
        if (typeof text === "undefined") {
          throw new AppwriteException('Missing required parameter: "text"');
        }
        if (typeof text !== "undefined") {
          payload["text"] = text;
        }
        if (typeof size !== "undefined") {
          payload["size"] = size;
        }
        if (typeof margin !== "undefined") {
          payload["margin"] = margin;
        }
        if (typeof download !== "undefined") {
          payload["download"] = download;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload, "arraybuffer");
      }
    };
    module.exports = Avatars;
  }
});

// node_modules/node-appwrite/lib/services/databases.js
var require_databases = __commonJS({
  "node_modules/node-appwrite/lib/services/databases.js"(exports, module) {
    var Service = require_service();
    var AppwriteException = require_exception();
    var InputFile = require_inputFile();
    var client = require_client();
    var Stream = require_stream();
    var { promisify } = require_util();
    var fs = require_fs();
    var Databases = class extends Service {
      constructor(client2) {
        super(client2);
      }
      /**
       * List Databases
       *
       * Get a list of all databases from the current Appwrite project. You can use
       * the search parameter to filter your results.
       *
       * @param {string[]} queries
       * @param {string} search
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async list(queries, search) {
        let path = "/databases";
        let payload = {};
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        if (typeof search !== "undefined") {
          payload["search"] = search;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Database
       *
       * Create a new Database.
       * 
       *
       * @param {string} databaseId
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async create(databaseId, name) {
        let path = "/databases";
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof name === "undefined") {
          throw new AppwriteException('Missing required parameter: "name"');
        }
        if (typeof databaseId !== "undefined") {
          payload["databaseId"] = databaseId;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Database
       *
       * Get a database by its unique ID. This endpoint response returns a JSON
       * object with the database metadata.
       *
       * @param {string} databaseId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async get(databaseId) {
        let path = "/databases/{databaseId}".replace("{databaseId}", databaseId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Database
       *
       * Update a database by its unique ID.
       *
       * @param {string} databaseId
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async update(databaseId, name) {
        let path = "/databases/{databaseId}".replace("{databaseId}", databaseId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof name === "undefined") {
          throw new AppwriteException('Missing required parameter: "name"');
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("put", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete Database
       *
       * Delete a database by its unique ID. Only API keys with with databases.write
       * scope can delete a database.
       *
       * @param {string} databaseId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async delete(databaseId) {
        let path = "/databases/{databaseId}".replace("{databaseId}", databaseId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Collections
       *
       * Get a list of all collections that belong to the provided databaseId. You
       * can use the search parameter to filter your results.
       *
       * @param {string} databaseId
       * @param {string[]} queries
       * @param {string} search
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listCollections(databaseId, queries, search) {
        let path = "/databases/{databaseId}/collections".replace("{databaseId}", databaseId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        if (typeof search !== "undefined") {
          payload["search"] = search;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Collection
       *
       * Create a new Collection. Before using this route, you should create a new
       * database resource using either a [server
       * integration](/docs/server/databases#databasesCreateCollection) API or
       * directly from your database console.
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} name
       * @param {string[]} permissions
       * @param {boolean} documentSecurity
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createCollection(databaseId, collectionId, name, permissions, documentSecurity) {
        let path = "/databases/{databaseId}/collections".replace("{databaseId}", databaseId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof name === "undefined") {
          throw new AppwriteException('Missing required parameter: "name"');
        }
        if (typeof collectionId !== "undefined") {
          payload["collectionId"] = collectionId;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        if (typeof permissions !== "undefined") {
          payload["permissions"] = permissions;
        }
        if (typeof documentSecurity !== "undefined") {
          payload["documentSecurity"] = documentSecurity;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Collection
       *
       * Get a collection by its unique ID. This endpoint response returns a JSON
       * object with the collection metadata.
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getCollection(databaseId, collectionId) {
        let path = "/databases/{databaseId}/collections/{collectionId}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Collection
       *
       * Update a collection by its unique ID.
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} name
       * @param {string[]} permissions
       * @param {boolean} documentSecurity
       * @param {boolean} enabled
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateCollection(databaseId, collectionId, name, permissions, documentSecurity, enabled) {
        let path = "/databases/{databaseId}/collections/{collectionId}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof name === "undefined") {
          throw new AppwriteException('Missing required parameter: "name"');
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        if (typeof permissions !== "undefined") {
          payload["permissions"] = permissions;
        }
        if (typeof documentSecurity !== "undefined") {
          payload["documentSecurity"] = documentSecurity;
        }
        if (typeof enabled !== "undefined") {
          payload["enabled"] = enabled;
        }
        return await this.client.call("put", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete Collection
       *
       * Delete a collection by its unique ID. Only users with write permissions
       * have access to delete this resource.
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async deleteCollection(databaseId, collectionId) {
        let path = "/databases/{databaseId}/collections/{collectionId}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Attributes
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listAttributes(databaseId, collectionId) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Boolean Attribute
       *
       * Create a boolean attribute.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {boolean} xdefault
       * @param {boolean} array
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createBooleanAttribute(databaseId, collectionId, key, required, xdefault, array) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/boolean".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof key !== "undefined") {
          payload["key"] = key;
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        if (typeof array !== "undefined") {
          payload["array"] = array;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Boolean Attribute
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {boolean} xdefault
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateBooleanAttribute(databaseId, collectionId, key, required, xdefault) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/boolean/{key}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof xdefault === "undefined") {
          throw new AppwriteException('Missing required parameter: "xdefault"');
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create DateTime Attribute
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {string} xdefault
       * @param {boolean} array
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createDatetimeAttribute(databaseId, collectionId, key, required, xdefault, array) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/datetime".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof key !== "undefined") {
          payload["key"] = key;
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        if (typeof array !== "undefined") {
          payload["array"] = array;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update DateTime Attribute
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {string} xdefault
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateDatetimeAttribute(databaseId, collectionId, key, required, xdefault) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/datetime/{key}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof xdefault === "undefined") {
          throw new AppwriteException('Missing required parameter: "xdefault"');
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Email Attribute
       *
       * Create an email attribute.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {string} xdefault
       * @param {boolean} array
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createEmailAttribute(databaseId, collectionId, key, required, xdefault, array) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/email".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof key !== "undefined") {
          payload["key"] = key;
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        if (typeof array !== "undefined") {
          payload["array"] = array;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Email Attribute
       *
       * Update an email attribute. Changing the `default` value will not update
       * already existing documents.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {string} xdefault
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateEmailAttribute(databaseId, collectionId, key, required, xdefault) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/email/{key}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof xdefault === "undefined") {
          throw new AppwriteException('Missing required parameter: "xdefault"');
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Enum Attribute
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {string[]} elements
       * @param {boolean} required
       * @param {string} xdefault
       * @param {boolean} array
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createEnumAttribute(databaseId, collectionId, key, elements, required, xdefault, array) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/enum".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof elements === "undefined") {
          throw new AppwriteException('Missing required parameter: "elements"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof key !== "undefined") {
          payload["key"] = key;
        }
        if (typeof elements !== "undefined") {
          payload["elements"] = elements;
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        if (typeof array !== "undefined") {
          payload["array"] = array;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Enum Attribute
       *
       * Update an enum attribute. Changing the `default` value will not update
       * already existing documents.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {string[]} elements
       * @param {boolean} required
       * @param {string} xdefault
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateEnumAttribute(databaseId, collectionId, key, elements, required, xdefault) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/enum/{key}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof elements === "undefined") {
          throw new AppwriteException('Missing required parameter: "elements"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof xdefault === "undefined") {
          throw new AppwriteException('Missing required parameter: "xdefault"');
        }
        if (typeof elements !== "undefined") {
          payload["elements"] = elements;
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Float Attribute
       *
       * Create a float attribute. Optionally, minimum and maximum values can be
       * provided.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {number} min
       * @param {number} max
       * @param {number} xdefault
       * @param {boolean} array
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createFloatAttribute(databaseId, collectionId, key, required, min, max, xdefault, array) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/float".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof key !== "undefined") {
          payload["key"] = key;
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof min !== "undefined") {
          payload["min"] = min;
        }
        if (typeof max !== "undefined") {
          payload["max"] = max;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        if (typeof array !== "undefined") {
          payload["array"] = array;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Float Attribute
       *
       * Update a float attribute. Changing the `default` value will not update
       * already existing documents.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {number} min
       * @param {number} max
       * @param {number} xdefault
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateFloatAttribute(databaseId, collectionId, key, required, min, max, xdefault) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/float/{key}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof min === "undefined") {
          throw new AppwriteException('Missing required parameter: "min"');
        }
        if (typeof max === "undefined") {
          throw new AppwriteException('Missing required parameter: "max"');
        }
        if (typeof xdefault === "undefined") {
          throw new AppwriteException('Missing required parameter: "xdefault"');
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof min !== "undefined") {
          payload["min"] = min;
        }
        if (typeof max !== "undefined") {
          payload["max"] = max;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Integer Attribute
       *
       * Create an integer attribute. Optionally, minimum and maximum values can be
       * provided.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {number} min
       * @param {number} max
       * @param {number} xdefault
       * @param {boolean} array
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createIntegerAttribute(databaseId, collectionId, key, required, min, max, xdefault, array) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/integer".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof key !== "undefined") {
          payload["key"] = key;
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof min !== "undefined") {
          payload["min"] = min;
        }
        if (typeof max !== "undefined") {
          payload["max"] = max;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        if (typeof array !== "undefined") {
          payload["array"] = array;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Integer Attribute
       *
       * Update an integer attribute. Changing the `default` value will not update
       * already existing documents.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {number} min
       * @param {number} max
       * @param {number} xdefault
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateIntegerAttribute(databaseId, collectionId, key, required, min, max, xdefault) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/integer/{key}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof min === "undefined") {
          throw new AppwriteException('Missing required parameter: "min"');
        }
        if (typeof max === "undefined") {
          throw new AppwriteException('Missing required parameter: "max"');
        }
        if (typeof xdefault === "undefined") {
          throw new AppwriteException('Missing required parameter: "xdefault"');
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof min !== "undefined") {
          payload["min"] = min;
        }
        if (typeof max !== "undefined") {
          payload["max"] = max;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create IP Address Attribute
       *
       * Create IP address attribute.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {string} xdefault
       * @param {boolean} array
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createIpAttribute(databaseId, collectionId, key, required, xdefault, array) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/ip".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof key !== "undefined") {
          payload["key"] = key;
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        if (typeof array !== "undefined") {
          payload["array"] = array;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update IP Address Attribute
       *
       * Update an ip attribute. Changing the `default` value will not update
       * already existing documents.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {string} xdefault
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateIpAttribute(databaseId, collectionId, key, required, xdefault) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/ip/{key}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof xdefault === "undefined") {
          throw new AppwriteException('Missing required parameter: "xdefault"');
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Relationship Attribute
       *
       * Create relationship attribute. [Learn more about relationship
       * attributes](/docs/databases-relationships#relationship-attributes).
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} relatedCollectionId
       * @param {string} type
       * @param {boolean} twoWay
       * @param {string} key
       * @param {string} twoWayKey
       * @param {string} onDelete
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createRelationshipAttribute(databaseId, collectionId, relatedCollectionId, type, twoWay, key, twoWayKey, onDelete) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/relationship".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof relatedCollectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "relatedCollectionId"');
        }
        if (typeof type === "undefined") {
          throw new AppwriteException('Missing required parameter: "type"');
        }
        if (typeof relatedCollectionId !== "undefined") {
          payload["relatedCollectionId"] = relatedCollectionId;
        }
        if (typeof type !== "undefined") {
          payload["type"] = type;
        }
        if (typeof twoWay !== "undefined") {
          payload["twoWay"] = twoWay;
        }
        if (typeof key !== "undefined") {
          payload["key"] = key;
        }
        if (typeof twoWayKey !== "undefined") {
          payload["twoWayKey"] = twoWayKey;
        }
        if (typeof onDelete !== "undefined") {
          payload["onDelete"] = onDelete;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create String Attribute
       *
       * Create a string attribute.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {number} size
       * @param {boolean} required
       * @param {string} xdefault
       * @param {boolean} array
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createStringAttribute(databaseId, collectionId, key, size, required, xdefault, array) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/string".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof size === "undefined") {
          throw new AppwriteException('Missing required parameter: "size"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof key !== "undefined") {
          payload["key"] = key;
        }
        if (typeof size !== "undefined") {
          payload["size"] = size;
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        if (typeof array !== "undefined") {
          payload["array"] = array;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update String Attribute
       *
       * Update a string attribute. Changing the `default` value will not update
       * already existing documents.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {string} xdefault
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateStringAttribute(databaseId, collectionId, key, required, xdefault) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/string/{key}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof xdefault === "undefined") {
          throw new AppwriteException('Missing required parameter: "xdefault"');
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create URL Attribute
       *
       * Create a URL attribute.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {string} xdefault
       * @param {boolean} array
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createUrlAttribute(databaseId, collectionId, key, required, xdefault, array) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/url".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof key !== "undefined") {
          payload["key"] = key;
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        if (typeof array !== "undefined") {
          payload["array"] = array;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update URL Attribute
       *
       * Update an url attribute. Changing the `default` value will not update
       * already existing documents.
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {boolean} required
       * @param {string} xdefault
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateUrlAttribute(databaseId, collectionId, key, required, xdefault) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/url/{key}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof required === "undefined") {
          throw new AppwriteException('Missing required parameter: "required"');
        }
        if (typeof xdefault === "undefined") {
          throw new AppwriteException('Missing required parameter: "xdefault"');
        }
        if (typeof required !== "undefined") {
          payload["required"] = required;
        }
        if (typeof xdefault !== "undefined") {
          payload["default"] = xdefault;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Attribute
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getAttribute(databaseId, collectionId, key) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/{key}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete Attribute
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async deleteAttribute(databaseId, collectionId, key) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/{key}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Relationship Attribute
       *
       * Update relationship attribute. [Learn more about relationship
       * attributes](/docs/databases-relationships#relationship-attributes).
       * 
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {string} onDelete
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateRelationshipAttribute(databaseId, collectionId, key, onDelete) {
        let path = "/databases/{databaseId}/collections/{collectionId}/attributes/{key}/relationship".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof onDelete !== "undefined") {
          payload["onDelete"] = onDelete;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Documents
       *
       * Get a list of all the user's documents in a given collection. You can use
       * the query params to filter your results.
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string[]} queries
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listDocuments(databaseId, collectionId, queries) {
        let path = "/databases/{databaseId}/collections/{collectionId}/documents".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Document
       *
       * Create a new Document. Before using this route, you should create a new
       * collection resource using either a [server
       * integration](/docs/server/databases#databasesCreateCollection) API or
       * directly from your database console.
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} documentId
       * @param {object} data
       * @param {string[]} permissions
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createDocument(databaseId, collectionId, documentId, data, permissions) {
        let path = "/databases/{databaseId}/collections/{collectionId}/documents".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof documentId === "undefined") {
          throw new AppwriteException('Missing required parameter: "documentId"');
        }
        if (typeof data === "undefined") {
          throw new AppwriteException('Missing required parameter: "data"');
        }
        if (typeof documentId !== "undefined") {
          payload["documentId"] = documentId;
        }
        if (typeof data !== "undefined") {
          payload["data"] = data;
        }
        if (typeof permissions !== "undefined") {
          payload["permissions"] = permissions;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Document
       *
       * Get a document by its unique ID. This endpoint response returns a JSON
       * object with the document data.
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} documentId
       * @param {string[]} queries
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getDocument(databaseId, collectionId, documentId, queries) {
        let path = "/databases/{databaseId}/collections/{collectionId}/documents/{documentId}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{documentId}", documentId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof documentId === "undefined") {
          throw new AppwriteException('Missing required parameter: "documentId"');
        }
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Document
       *
       * Update a document by its unique ID. Using the patch method you can pass
       * only specific fields that will get updated.
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} documentId
       * @param {object} data
       * @param {string[]} permissions
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateDocument(databaseId, collectionId, documentId, data, permissions) {
        let path = "/databases/{databaseId}/collections/{collectionId}/documents/{documentId}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{documentId}", documentId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof documentId === "undefined") {
          throw new AppwriteException('Missing required parameter: "documentId"');
        }
        if (typeof data !== "undefined") {
          payload["data"] = data;
        }
        if (typeof permissions !== "undefined") {
          payload["permissions"] = permissions;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete Document
       *
       * Delete a document by its unique ID.
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} documentId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async deleteDocument(databaseId, collectionId, documentId) {
        let path = "/databases/{databaseId}/collections/{collectionId}/documents/{documentId}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{documentId}", documentId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof documentId === "undefined") {
          throw new AppwriteException('Missing required parameter: "documentId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Indexes
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listIndexes(databaseId, collectionId) {
        let path = "/databases/{databaseId}/collections/{collectionId}/indexes".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Index
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @param {string} type
       * @param {string[]} attributes
       * @param {string[]} orders
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createIndex(databaseId, collectionId, key, type, attributes, orders) {
        let path = "/databases/{databaseId}/collections/{collectionId}/indexes".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof type === "undefined") {
          throw new AppwriteException('Missing required parameter: "type"');
        }
        if (typeof attributes === "undefined") {
          throw new AppwriteException('Missing required parameter: "attributes"');
        }
        if (typeof key !== "undefined") {
          payload["key"] = key;
        }
        if (typeof type !== "undefined") {
          payload["type"] = type;
        }
        if (typeof attributes !== "undefined") {
          payload["attributes"] = attributes;
        }
        if (typeof orders !== "undefined") {
          payload["orders"] = orders;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Index
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getIndex(databaseId, collectionId, key) {
        let path = "/databases/{databaseId}/collections/{collectionId}/indexes/{key}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete Index
       *
       * @param {string} databaseId
       * @param {string} collectionId
       * @param {string} key
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async deleteIndex(databaseId, collectionId, key) {
        let path = "/databases/{databaseId}/collections/{collectionId}/indexes/{key}".replace("{databaseId}", databaseId).replace("{collectionId}", collectionId).replace("{key}", key);
        let payload = {};
        if (typeof databaseId === "undefined") {
          throw new AppwriteException('Missing required parameter: "databaseId"');
        }
        if (typeof collectionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "collectionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
    };
    module.exports = Databases;
  }
});

// node_modules/node-appwrite/lib/services/functions.js
var require_functions = __commonJS({
  "node_modules/node-appwrite/lib/services/functions.js"(exports, module) {
    var Service = require_service();
    var AppwriteException = require_exception();
    var InputFile = require_inputFile();
    var client = require_client();
    var Stream = require_stream();
    var { promisify } = require_util();
    var fs = require_fs();
    var Functions = class extends Service {
      constructor(client2) {
        super(client2);
      }
      /**
       * List Functions
       *
       * Get a list of all the project's functions. You can use the query params to
       * filter your results.
       *
       * @param {string[]} queries
       * @param {string} search
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async list(queries, search) {
        let path = "/functions";
        let payload = {};
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        if (typeof search !== "undefined") {
          payload["search"] = search;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Function
       *
       * Create a new function. You can pass a list of
       * [permissions](/docs/permissions) to allow different project users or team
       * with access to execute the function using the client API.
       *
       * @param {string} functionId
       * @param {string} name
       * @param {string} runtime
       * @param {string[]} execute
       * @param {string[]} events
       * @param {string} schedule
       * @param {number} timeout
       * @param {boolean} enabled
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async create(functionId, name, runtime, execute, events, schedule, timeout, enabled) {
        let path = "/functions";
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof name === "undefined") {
          throw new AppwriteException('Missing required parameter: "name"');
        }
        if (typeof runtime === "undefined") {
          throw new AppwriteException('Missing required parameter: "runtime"');
        }
        if (typeof functionId !== "undefined") {
          payload["functionId"] = functionId;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        if (typeof execute !== "undefined") {
          payload["execute"] = execute;
        }
        if (typeof runtime !== "undefined") {
          payload["runtime"] = runtime;
        }
        if (typeof events !== "undefined") {
          payload["events"] = events;
        }
        if (typeof schedule !== "undefined") {
          payload["schedule"] = schedule;
        }
        if (typeof timeout !== "undefined") {
          payload["timeout"] = timeout;
        }
        if (typeof enabled !== "undefined") {
          payload["enabled"] = enabled;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List runtimes
       *
       * Get a list of all runtimes that are currently active on your instance.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listRuntimes() {
        let path = "/functions/runtimes";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Function
       *
       * Get a function by its unique ID.
       *
       * @param {string} functionId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async get(functionId) {
        let path = "/functions/{functionId}".replace("{functionId}", functionId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Function
       *
       * Update function by its unique ID.
       *
       * @param {string} functionId
       * @param {string} name
       * @param {string[]} execute
       * @param {string[]} events
       * @param {string} schedule
       * @param {number} timeout
       * @param {boolean} enabled
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async update(functionId, name, execute, events, schedule, timeout, enabled) {
        let path = "/functions/{functionId}".replace("{functionId}", functionId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof name === "undefined") {
          throw new AppwriteException('Missing required parameter: "name"');
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        if (typeof execute !== "undefined") {
          payload["execute"] = execute;
        }
        if (typeof events !== "undefined") {
          payload["events"] = events;
        }
        if (typeof schedule !== "undefined") {
          payload["schedule"] = schedule;
        }
        if (typeof timeout !== "undefined") {
          payload["timeout"] = timeout;
        }
        if (typeof enabled !== "undefined") {
          payload["enabled"] = enabled;
        }
        return await this.client.call("put", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete Function
       *
       * Delete a function by its unique ID.
       *
       * @param {string} functionId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async delete(functionId) {
        let path = "/functions/{functionId}".replace("{functionId}", functionId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Deployments
       *
       * Get a list of all the project's code deployments. You can use the query
       * params to filter your results.
       *
       * @param {string} functionId
       * @param {string[]} queries
       * @param {string} search
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listDeployments(functionId, queries, search) {
        let path = "/functions/{functionId}/deployments".replace("{functionId}", functionId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        if (typeof search !== "undefined") {
          payload["search"] = search;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Deployment
       *
       * Create a new function code deployment. Use this endpoint to upload a new
       * version of your code function. To execute your newly uploaded code, you'll
       * need to update the function's deployment to use your new deployment UID.
       * 
       * This endpoint accepts a tar.gz file compressed with your code. Make sure to
       * include any dependencies your code has within the compressed file. You can
       * learn more about code packaging in the [Appwrite Cloud Functions
       * tutorial](/docs/functions).
       * 
       * Use the "command" param to set the entry point used to execute your code.
       *
       * @param {string} functionId
       * @param {string} entrypoint
       * @param {InputFile} code
       * @param {boolean} activate
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createDeployment(functionId, entrypoint, code, activate, onProgress = () => {
      }) {
        let path = "/functions/{functionId}/deployments".replace("{functionId}", functionId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof entrypoint === "undefined") {
          throw new AppwriteException('Missing required parameter: "entrypoint"');
        }
        if (typeof code === "undefined") {
          throw new AppwriteException('Missing required parameter: "code"');
        }
        if (typeof activate === "undefined") {
          throw new AppwriteException('Missing required parameter: "activate"');
        }
        if (typeof entrypoint !== "undefined") {
          payload["entrypoint"] = entrypoint;
        }
        if (typeof code !== "undefined") {
          payload["code"] = code;
        }
        if (typeof activate !== "undefined") {
          payload["activate"] = activate.toString();
        }
        const size = code.size;
        const headers = {
          "content-type": "multipart/form-data"
        };
        let id = void 0;
        let response = void 0;
        let chunksUploaded = 0;
        let currentChunk = Buffer.from("");
        let currentChunkSize = 0;
        let currentChunkStart = 0;
        const selfClient = this.client;
        async function uploadChunk(lastUpload = false) {
          if (chunksUploaded - 1 >= currentChunkStart / client.CHUNK_SIZE) {
            return;
          }
          const start = currentChunkStart;
          const end = Math.min(start + client.CHUNK_SIZE - 1, size);
          if (!lastUpload || currentChunkStart !== 0) {
            headers["content-range"] = "bytes " + start + "-" + end + "/" + size;
          }
          if (id) {
            headers["x-appwrite-id"] = id;
          }
          const stream = Stream.Readable.from(currentChunk);
          payload["code"] = { type: "file", file: stream, filename: code.filename };
          response = await selfClient.call("post", path, headers, payload);
          if (!id) {
            id = response["$id"];
          }
          if (onProgress !== null) {
            onProgress({
              $id: response["$id"],
              progress: Math.min((start + client.CHUNK_SIZE) * client.CHUNK_SIZE, size) / size * 100,
              sizeUploaded: end + 1,
              chunksTotal: response["chunksTotal"],
              chunksUploaded: response["chunksUploaded"]
            });
          }
          currentChunkStart += client.CHUNK_SIZE;
        }
        return await new Promise((resolve, reject) => {
          const writeStream = new Stream.Writable();
          writeStream._write = async (mainChunk, encoding, callback) => {
            try {
              const mainChunkSize = Buffer.byteLength(mainChunk);
              const chunksCount = Math.ceil(mainChunkSize / client.CHUNK_SIZE);
              const chunks = [];
              for (let i = 0; i < chunksCount; i++) {
                const chunk = mainChunk.slice(i * client.CHUNK_SIZE, (i + 1) * client.CHUNK_SIZE);
                chunks.push(chunk);
              }
              for (const chunk of chunks) {
                const chunkSize = Buffer.byteLength(chunk);
                if (chunkSize + currentChunkSize == client.CHUNK_SIZE) {
                  currentChunk = Buffer.concat([currentChunk, chunk]);
                  await uploadChunk();
                  currentChunk = Buffer.from("");
                  currentChunkSize = 0;
                } else if (chunkSize + currentChunkSize > client.CHUNK_SIZE) {
                  const bytesToUpload = client.CHUNK_SIZE - currentChunkSize;
                  const newChunkSection = chunk.slice(0, bytesToUpload);
                  currentChunk = Buffer.concat([currentChunk, newChunkSection]);
                  currentChunkSize = Buffer.byteLength(currentChunk);
                  await uploadChunk();
                  currentChunk = chunk.slice(bytesToUpload, void 0);
                  currentChunkSize = chunkSize - bytesToUpload;
                } else {
                  currentChunk = Buffer.concat([currentChunk, chunk]);
                  currentChunkSize = chunkSize + currentChunkSize;
                }
              }
              callback();
            } catch (e) {
              callback(e);
            }
          };
          writeStream.on("finish", async () => {
            if (currentChunkSize > 0) {
              try {
                await uploadChunk(true);
              } catch (e) {
                reject(e);
              }
            }
            resolve(response);
          });
          writeStream.on("error", (err) => {
            reject(err);
          });
          code.stream.pipe(writeStream);
        });
      }
      /**
       * Get Deployment
       *
       * Get a code deployment by its unique ID.
       *
       * @param {string} functionId
       * @param {string} deploymentId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getDeployment(functionId, deploymentId) {
        let path = "/functions/{functionId}/deployments/{deploymentId}".replace("{functionId}", functionId).replace("{deploymentId}", deploymentId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof deploymentId === "undefined") {
          throw new AppwriteException('Missing required parameter: "deploymentId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Function Deployment
       *
       * Update the function code deployment ID using the unique function ID. Use
       * this endpoint to switch the code deployment that should be executed by the
       * execution endpoint.
       *
       * @param {string} functionId
       * @param {string} deploymentId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateDeployment(functionId, deploymentId) {
        let path = "/functions/{functionId}/deployments/{deploymentId}".replace("{functionId}", functionId).replace("{deploymentId}", deploymentId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof deploymentId === "undefined") {
          throw new AppwriteException('Missing required parameter: "deploymentId"');
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete Deployment
       *
       * Delete a code deployment by its unique ID.
       *
       * @param {string} functionId
       * @param {string} deploymentId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async deleteDeployment(functionId, deploymentId) {
        let path = "/functions/{functionId}/deployments/{deploymentId}".replace("{functionId}", functionId).replace("{deploymentId}", deploymentId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof deploymentId === "undefined") {
          throw new AppwriteException('Missing required parameter: "deploymentId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Build
       *
       * @param {string} functionId
       * @param {string} deploymentId
       * @param {string} buildId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createBuild(functionId, deploymentId, buildId) {
        let path = "/functions/{functionId}/deployments/{deploymentId}/builds/{buildId}".replace("{functionId}", functionId).replace("{deploymentId}", deploymentId).replace("{buildId}", buildId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof deploymentId === "undefined") {
          throw new AppwriteException('Missing required parameter: "deploymentId"');
        }
        if (typeof buildId === "undefined") {
          throw new AppwriteException('Missing required parameter: "buildId"');
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Executions
       *
       * Get a list of all the current user function execution logs. You can use the
       * query params to filter your results.
       *
       * @param {string} functionId
       * @param {string[]} queries
       * @param {string} search
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listExecutions(functionId, queries, search) {
        let path = "/functions/{functionId}/executions".replace("{functionId}", functionId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        if (typeof search !== "undefined") {
          payload["search"] = search;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Execution
       *
       * Trigger a function execution. The returned object will return you the
       * current execution status. You can ping the `Get Execution` endpoint to get
       * updates on the current execution status. Once this endpoint is called, your
       * function execution process will start asynchronously.
       *
       * @param {string} functionId
       * @param {string} data
       * @param {boolean} async
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createExecution(functionId, data, async) {
        let path = "/functions/{functionId}/executions".replace("{functionId}", functionId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof data !== "undefined") {
          payload["data"] = data;
        }
        if (typeof async !== "undefined") {
          payload["async"] = async;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Execution
       *
       * Get a function execution log by its unique ID.
       *
       * @param {string} functionId
       * @param {string} executionId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getExecution(functionId, executionId) {
        let path = "/functions/{functionId}/executions/{executionId}".replace("{functionId}", functionId).replace("{executionId}", executionId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof executionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "executionId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Variables
       *
       * Get a list of all variables of a specific function.
       *
       * @param {string} functionId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listVariables(functionId) {
        let path = "/functions/{functionId}/variables".replace("{functionId}", functionId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Variable
       *
       * Create a new function variable. These variables can be accessed within
       * function in the `env` object under the request variable.
       *
       * @param {string} functionId
       * @param {string} key
       * @param {string} value
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createVariable(functionId, key, value) {
        let path = "/functions/{functionId}/variables".replace("{functionId}", functionId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof value === "undefined") {
          throw new AppwriteException('Missing required parameter: "value"');
        }
        if (typeof key !== "undefined") {
          payload["key"] = key;
        }
        if (typeof value !== "undefined") {
          payload["value"] = value;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Variable
       *
       * Get a variable by its unique ID.
       *
       * @param {string} functionId
       * @param {string} variableId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getVariable(functionId, variableId) {
        let path = "/functions/{functionId}/variables/{variableId}".replace("{functionId}", functionId).replace("{variableId}", variableId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof variableId === "undefined") {
          throw new AppwriteException('Missing required parameter: "variableId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Variable
       *
       * Update variable by its unique ID.
       *
       * @param {string} functionId
       * @param {string} variableId
       * @param {string} key
       * @param {string} value
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateVariable(functionId, variableId, key, value) {
        let path = "/functions/{functionId}/variables/{variableId}".replace("{functionId}", functionId).replace("{variableId}", variableId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof variableId === "undefined") {
          throw new AppwriteException('Missing required parameter: "variableId"');
        }
        if (typeof key === "undefined") {
          throw new AppwriteException('Missing required parameter: "key"');
        }
        if (typeof key !== "undefined") {
          payload["key"] = key;
        }
        if (typeof value !== "undefined") {
          payload["value"] = value;
        }
        return await this.client.call("put", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete Variable
       *
       * Delete a variable by its unique ID.
       *
       * @param {string} functionId
       * @param {string} variableId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async deleteVariable(functionId, variableId) {
        let path = "/functions/{functionId}/variables/{variableId}".replace("{functionId}", functionId).replace("{variableId}", variableId);
        let payload = {};
        if (typeof functionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "functionId"');
        }
        if (typeof variableId === "undefined") {
          throw new AppwriteException('Missing required parameter: "variableId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
    };
    module.exports = Functions;
  }
});

// node_modules/node-appwrite/lib/services/graphql.js
var require_graphql = __commonJS({
  "node_modules/node-appwrite/lib/services/graphql.js"(exports, module) {
    var Service = require_service();
    var AppwriteException = require_exception();
    var InputFile = require_inputFile();
    var client = require_client();
    var Stream = require_stream();
    var { promisify } = require_util();
    var fs = require_fs();
    var Graphql = class extends Service {
      constructor(client2) {
        super(client2);
      }
      /**
       * GraphQL Endpoint
       *
       * Execute a GraphQL mutation.
       *
       * @param {object} query
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async query(query) {
        let path = "/graphql";
        let payload = {};
        if (typeof query === "undefined") {
          throw new AppwriteException('Missing required parameter: "query"');
        }
        if (typeof query !== "undefined") {
          payload["query"] = query;
        }
        return await this.client.call("post", path, {
          "x-sdk-graphql": "true",
          "content-type": "application/json"
        }, payload);
      }
      /**
       * GraphQL Endpoint
       *
       * Execute a GraphQL mutation.
       *
       * @param {object} query
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async mutation(query) {
        let path = "/graphql/mutation";
        let payload = {};
        if (typeof query === "undefined") {
          throw new AppwriteException('Missing required parameter: "query"');
        }
        if (typeof query !== "undefined") {
          payload["query"] = query;
        }
        return await this.client.call("post", path, {
          "x-sdk-graphql": "true",
          "content-type": "application/json"
        }, payload);
      }
    };
    module.exports = Graphql;
  }
});

// node_modules/node-appwrite/lib/services/health.js
var require_health = __commonJS({
  "node_modules/node-appwrite/lib/services/health.js"(exports, module) {
    var Service = require_service();
    var AppwriteException = require_exception();
    var InputFile = require_inputFile();
    var client = require_client();
    var Stream = require_stream();
    var { promisify } = require_util();
    var fs = require_fs();
    var Health = class extends Service {
      constructor(client2) {
        super(client2);
      }
      /**
       * Get HTTP
       *
       * Check the Appwrite HTTP server is up and responsive.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async get() {
        let path = "/health";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Antivirus
       *
       * Check the Appwrite Antivirus server is up and connection is successful.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getAntivirus() {
        let path = "/health/anti-virus";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Cache
       *
       * Check the Appwrite in-memory cache server is up and connection is
       * successful.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getCache() {
        let path = "/health/cache";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get DB
       *
       * Check the Appwrite database server is up and connection is successful.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getDB() {
        let path = "/health/db";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Certificates Queue
       *
       * Get the number of certificates that are waiting to be issued against
       * [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue
       * server.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getQueueCertificates() {
        let path = "/health/queue/certificates";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Functions Queue
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getQueueFunctions() {
        let path = "/health/queue/functions";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Logs Queue
       *
       * Get the number of logs that are waiting to be processed in the Appwrite
       * internal queue server.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getQueueLogs() {
        let path = "/health/queue/logs";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Webhooks Queue
       *
       * Get the number of webhooks that are waiting to be processed in the Appwrite
       * internal queue server.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getQueueWebhooks() {
        let path = "/health/queue/webhooks";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Local Storage
       *
       * Check the Appwrite local storage device is up and connection is successful.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getStorageLocal() {
        let path = "/health/storage/local";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Time
       *
       * Check the Appwrite server time is synced with Google remote NTP server. We
       * use this technology to smoothly handle leap seconds with no disruptive
       * events. The [Network Time
       * Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is
       * used by hundreds of millions of computers and devices to synchronize their
       * clocks over the Internet. If your computer sets its own clock, it likely
       * uses NTP.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getTime() {
        let path = "/health/time";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
    };
    module.exports = Health;
  }
});

// node_modules/node-appwrite/lib/services/locale.js
var require_locale = __commonJS({
  "node_modules/node-appwrite/lib/services/locale.js"(exports, module) {
    var Service = require_service();
    var AppwriteException = require_exception();
    var InputFile = require_inputFile();
    var client = require_client();
    var Stream = require_stream();
    var { promisify } = require_util();
    var fs = require_fs();
    var Locale = class extends Service {
      constructor(client2) {
        super(client2);
      }
      /**
       * Get User Locale
       *
       * Get the current user location based on IP. Returns an object with user
       * country code, country name, continent name, continent code, ip address and
       * suggested currency. You can use the locale header to get the data in a
       * supported language.
       * 
       * ([IP Geolocation by DB-IP](https://db-ip.com))
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async get() {
        let path = "/locale";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Continents
       *
       * List of all continents. You can use the locale header to get the data in a
       * supported language.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listContinents() {
        let path = "/locale/continents";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Countries
       *
       * List of all countries. You can use the locale header to get the data in a
       * supported language.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listCountries() {
        let path = "/locale/countries";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List EU Countries
       *
       * List of all countries that are currently members of the EU. You can use the
       * locale header to get the data in a supported language.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listCountriesEU() {
        let path = "/locale/countries/eu";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Countries Phone Codes
       *
       * List of all countries phone codes. You can use the locale header to get the
       * data in a supported language.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listCountriesPhones() {
        let path = "/locale/countries/phones";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Currencies
       *
       * List of all currencies, including currency symbol, name, plural, and
       * decimal digits for all major and minor currencies. You can use the locale
       * header to get the data in a supported language.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listCurrencies() {
        let path = "/locale/currencies";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Languages
       *
       * List of all languages classified by ISO 639-1 including 2-letter code, name
       * in English, and name in the respective language.
       *
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listLanguages() {
        let path = "/locale/languages";
        let payload = {};
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
    };
    module.exports = Locale;
  }
});

// node_modules/node-appwrite/lib/services/storage.js
var require_storage = __commonJS({
  "node_modules/node-appwrite/lib/services/storage.js"(exports, module) {
    var Service = require_service();
    var AppwriteException = require_exception();
    var InputFile = require_inputFile();
    var client = require_client();
    var Stream = require_stream();
    var { promisify } = require_util();
    var fs = require_fs();
    var Storage = class extends Service {
      constructor(client2) {
        super(client2);
      }
      /**
       * List buckets
       *
       * Get a list of all the storage buckets. You can use the query params to
       * filter your results.
       *
       * @param {string[]} queries
       * @param {string} search
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listBuckets(queries, search) {
        let path = "/storage/buckets";
        let payload = {};
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        if (typeof search !== "undefined") {
          payload["search"] = search;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create bucket
       *
       * Create a new storage bucket.
       *
       * @param {string} bucketId
       * @param {string} name
       * @param {string[]} permissions
       * @param {boolean} fileSecurity
       * @param {boolean} enabled
       * @param {number} maximumFileSize
       * @param {string[]} allowedFileExtensions
       * @param {string} compression
       * @param {boolean} encryption
       * @param {boolean} antivirus
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createBucket(bucketId, name, permissions, fileSecurity, enabled, maximumFileSize, allowedFileExtensions, compression, encryption, antivirus) {
        let path = "/storage/buckets";
        let payload = {};
        if (typeof bucketId === "undefined") {
          throw new AppwriteException('Missing required parameter: "bucketId"');
        }
        if (typeof name === "undefined") {
          throw new AppwriteException('Missing required parameter: "name"');
        }
        if (typeof bucketId !== "undefined") {
          payload["bucketId"] = bucketId;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        if (typeof permissions !== "undefined") {
          payload["permissions"] = permissions;
        }
        if (typeof fileSecurity !== "undefined") {
          payload["fileSecurity"] = fileSecurity;
        }
        if (typeof enabled !== "undefined") {
          payload["enabled"] = enabled;
        }
        if (typeof maximumFileSize !== "undefined") {
          payload["maximumFileSize"] = maximumFileSize;
        }
        if (typeof allowedFileExtensions !== "undefined") {
          payload["allowedFileExtensions"] = allowedFileExtensions;
        }
        if (typeof compression !== "undefined") {
          payload["compression"] = compression;
        }
        if (typeof encryption !== "undefined") {
          payload["encryption"] = encryption;
        }
        if (typeof antivirus !== "undefined") {
          payload["antivirus"] = antivirus;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Bucket
       *
       * Get a storage bucket by its unique ID. This endpoint response returns a
       * JSON object with the storage bucket metadata.
       *
       * @param {string} bucketId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getBucket(bucketId) {
        let path = "/storage/buckets/{bucketId}".replace("{bucketId}", bucketId);
        let payload = {};
        if (typeof bucketId === "undefined") {
          throw new AppwriteException('Missing required parameter: "bucketId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Bucket
       *
       * Update a storage bucket by its unique ID.
       *
       * @param {string} bucketId
       * @param {string} name
       * @param {string[]} permissions
       * @param {boolean} fileSecurity
       * @param {boolean} enabled
       * @param {number} maximumFileSize
       * @param {string[]} allowedFileExtensions
       * @param {string} compression
       * @param {boolean} encryption
       * @param {boolean} antivirus
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateBucket(bucketId, name, permissions, fileSecurity, enabled, maximumFileSize, allowedFileExtensions, compression, encryption, antivirus) {
        let path = "/storage/buckets/{bucketId}".replace("{bucketId}", bucketId);
        let payload = {};
        if (typeof bucketId === "undefined") {
          throw new AppwriteException('Missing required parameter: "bucketId"');
        }
        if (typeof name === "undefined") {
          throw new AppwriteException('Missing required parameter: "name"');
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        if (typeof permissions !== "undefined") {
          payload["permissions"] = permissions;
        }
        if (typeof fileSecurity !== "undefined") {
          payload["fileSecurity"] = fileSecurity;
        }
        if (typeof enabled !== "undefined") {
          payload["enabled"] = enabled;
        }
        if (typeof maximumFileSize !== "undefined") {
          payload["maximumFileSize"] = maximumFileSize;
        }
        if (typeof allowedFileExtensions !== "undefined") {
          payload["allowedFileExtensions"] = allowedFileExtensions;
        }
        if (typeof compression !== "undefined") {
          payload["compression"] = compression;
        }
        if (typeof encryption !== "undefined") {
          payload["encryption"] = encryption;
        }
        if (typeof antivirus !== "undefined") {
          payload["antivirus"] = antivirus;
        }
        return await this.client.call("put", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete Bucket
       *
       * Delete a storage bucket by its unique ID.
       *
       * @param {string} bucketId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async deleteBucket(bucketId) {
        let path = "/storage/buckets/{bucketId}".replace("{bucketId}", bucketId);
        let payload = {};
        if (typeof bucketId === "undefined") {
          throw new AppwriteException('Missing required parameter: "bucketId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Files
       *
       * Get a list of all the user files. You can use the query params to filter
       * your results.
       *
       * @param {string} bucketId
       * @param {string[]} queries
       * @param {string} search
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listFiles(bucketId, queries, search) {
        let path = "/storage/buckets/{bucketId}/files".replace("{bucketId}", bucketId);
        let payload = {};
        if (typeof bucketId === "undefined") {
          throw new AppwriteException('Missing required parameter: "bucketId"');
        }
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        if (typeof search !== "undefined") {
          payload["search"] = search;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create File
       *
       * Create a new file. Before using this route, you should create a new bucket
       * resource using either a [server
       * integration](/docs/server/storage#storageCreateBucket) API or directly from
       * your Appwrite console.
       * 
       * Larger files should be uploaded using multiple requests with the
       * [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range)
       * header to send a partial request with a maximum supported chunk of `5MB`.
       * The `content-range` header values should always be in bytes.
       * 
       * When the first request is sent, the server will return the **File** object,
       * and the subsequent part request must include the file's **id** in
       * `x-appwrite-id` header to allow the server to know that the partial upload
       * is for the existing file and not for a new one.
       * 
       * If you're creating a new file using one of the Appwrite SDKs, all the
       * chunking logic will be managed by the SDK internally.
       * 
       *
       * @param {string} bucketId
       * @param {string} fileId
       * @param {InputFile} file
       * @param {string[]} permissions
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createFile(bucketId, fileId, file, permissions, onProgress = () => {
      }) {
        let path = "/storage/buckets/{bucketId}/files".replace("{bucketId}", bucketId);
        let payload = {};
        if (typeof bucketId === "undefined") {
          throw new AppwriteException('Missing required parameter: "bucketId"');
        }
        if (typeof fileId === "undefined") {
          throw new AppwriteException('Missing required parameter: "fileId"');
        }
        if (typeof file === "undefined") {
          throw new AppwriteException('Missing required parameter: "file"');
        }
        if (typeof fileId !== "undefined") {
          payload["fileId"] = fileId;
        }
        if (typeof file !== "undefined") {
          payload["file"] = file;
        }
        if (typeof permissions !== "undefined") {
          payload["permissions"] = permissions;
        }
        const size = file.size;
        const headers = {
          "content-type": "multipart/form-data"
        };
        let id = void 0;
        let response = void 0;
        let chunksUploaded = 0;
        if (fileId != "unique()") {
          try {
            response = await this.client.call("get", path + "/" + fileId, headers);
            chunksUploaded = response.chunksUploaded;
          } catch (e) {
          }
        }
        let currentChunk = Buffer.from("");
        let currentChunkSize = 0;
        let currentChunkStart = 0;
        const selfClient = this.client;
        async function uploadChunk(lastUpload = false) {
          if (chunksUploaded - 1 >= currentChunkStart / client.CHUNK_SIZE) {
            return;
          }
          const start = currentChunkStart;
          const end = Math.min(start + client.CHUNK_SIZE - 1, size);
          if (!lastUpload || currentChunkStart !== 0) {
            headers["content-range"] = "bytes " + start + "-" + end + "/" + size;
          }
          if (id) {
            headers["x-appwrite-id"] = id;
          }
          const stream = Stream.Readable.from(currentChunk);
          payload["file"] = { type: "file", file: stream, filename: file.filename };
          response = await selfClient.call("post", path, headers, payload);
          if (!id) {
            id = response["$id"];
          }
          if (onProgress !== null) {
            onProgress({
              $id: response["$id"],
              progress: Math.min((start + client.CHUNK_SIZE) * client.CHUNK_SIZE, size) / size * 100,
              sizeUploaded: end + 1,
              chunksTotal: response["chunksTotal"],
              chunksUploaded: response["chunksUploaded"]
            });
          }
          currentChunkStart += client.CHUNK_SIZE;
        }
        return await new Promise((resolve, reject) => {
          const writeStream = new Stream.Writable();
          writeStream._write = async (mainChunk, encoding, callback) => {
            try {
              const mainChunkSize = Buffer.byteLength(mainChunk);
              const chunksCount = Math.ceil(mainChunkSize / client.CHUNK_SIZE);
              const chunks = [];
              for (let i = 0; i < chunksCount; i++) {
                const chunk = mainChunk.slice(i * client.CHUNK_SIZE, (i + 1) * client.CHUNK_SIZE);
                chunks.push(chunk);
              }
              for (const chunk of chunks) {
                const chunkSize = Buffer.byteLength(chunk);
                if (chunkSize + currentChunkSize == client.CHUNK_SIZE) {
                  currentChunk = Buffer.concat([currentChunk, chunk]);
                  await uploadChunk();
                  currentChunk = Buffer.from("");
                  currentChunkSize = 0;
                } else if (chunkSize + currentChunkSize > client.CHUNK_SIZE) {
                  const bytesToUpload = client.CHUNK_SIZE - currentChunkSize;
                  const newChunkSection = chunk.slice(0, bytesToUpload);
                  currentChunk = Buffer.concat([currentChunk, newChunkSection]);
                  currentChunkSize = Buffer.byteLength(currentChunk);
                  await uploadChunk();
                  currentChunk = chunk.slice(bytesToUpload, void 0);
                  currentChunkSize = chunkSize - bytesToUpload;
                } else {
                  currentChunk = Buffer.concat([currentChunk, chunk]);
                  currentChunkSize = chunkSize + currentChunkSize;
                }
              }
              callback();
            } catch (e) {
              callback(e);
            }
          };
          writeStream.on("finish", async () => {
            if (currentChunkSize > 0) {
              try {
                await uploadChunk(true);
              } catch (e) {
                reject(e);
              }
            }
            resolve(response);
          });
          writeStream.on("error", (err) => {
            reject(err);
          });
          file.stream.pipe(writeStream);
        });
      }
      /**
       * Get File
       *
       * Get a file by its unique ID. This endpoint response returns a JSON object
       * with the file metadata.
       *
       * @param {string} bucketId
       * @param {string} fileId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getFile(bucketId, fileId) {
        let path = "/storage/buckets/{bucketId}/files/{fileId}".replace("{bucketId}", bucketId).replace("{fileId}", fileId);
        let payload = {};
        if (typeof bucketId === "undefined") {
          throw new AppwriteException('Missing required parameter: "bucketId"');
        }
        if (typeof fileId === "undefined") {
          throw new AppwriteException('Missing required parameter: "fileId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update File
       *
       * Update a file by its unique ID. Only users with write permissions have
       * access to update this resource.
       *
       * @param {string} bucketId
       * @param {string} fileId
       * @param {string[]} permissions
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateFile(bucketId, fileId, permissions) {
        let path = "/storage/buckets/{bucketId}/files/{fileId}".replace("{bucketId}", bucketId).replace("{fileId}", fileId);
        let payload = {};
        if (typeof bucketId === "undefined") {
          throw new AppwriteException('Missing required parameter: "bucketId"');
        }
        if (typeof fileId === "undefined") {
          throw new AppwriteException('Missing required parameter: "fileId"');
        }
        if (typeof permissions !== "undefined") {
          payload["permissions"] = permissions;
        }
        return await this.client.call("put", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete File
       *
       * Delete a file by its unique ID. Only users with write permissions have
       * access to delete this resource.
       *
       * @param {string} bucketId
       * @param {string} fileId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async deleteFile(bucketId, fileId) {
        let path = "/storage/buckets/{bucketId}/files/{fileId}".replace("{bucketId}", bucketId).replace("{fileId}", fileId);
        let payload = {};
        if (typeof bucketId === "undefined") {
          throw new AppwriteException('Missing required parameter: "bucketId"');
        }
        if (typeof fileId === "undefined") {
          throw new AppwriteException('Missing required parameter: "fileId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get File for Download
       *
       * Get a file content by its unique ID. The endpoint response return with a
       * 'Content-Disposition: attachment' header that tells the browser to start
       * downloading the file to user downloads directory.
       *
       * @param {string} bucketId
       * @param {string} fileId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getFileDownload(bucketId, fileId) {
        let path = "/storage/buckets/{bucketId}/files/{fileId}/download".replace("{bucketId}", bucketId).replace("{fileId}", fileId);
        let payload = {};
        if (typeof bucketId === "undefined") {
          throw new AppwriteException('Missing required parameter: "bucketId"');
        }
        if (typeof fileId === "undefined") {
          throw new AppwriteException('Missing required parameter: "fileId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload, "arraybuffer");
      }
      /**
       * Get File Preview
       *
       * Get a file preview image. Currently, this method supports preview for image
       * files (jpg, png, and gif), other supported formats, like pdf, docs, slides,
       * and spreadsheets, will return the file icon image. You can also pass query
       * string arguments for cutting and resizing your preview image. Preview is
       * supported only for image files smaller than 10MB.
       *
       * @param {string} bucketId
       * @param {string} fileId
       * @param {number} width
       * @param {number} height
       * @param {string} gravity
       * @param {number} quality
       * @param {number} borderWidth
       * @param {string} borderColor
       * @param {number} borderRadius
       * @param {number} opacity
       * @param {number} rotation
       * @param {string} background
       * @param {string} output
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getFilePreview(bucketId, fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output) {
        let path = "/storage/buckets/{bucketId}/files/{fileId}/preview".replace("{bucketId}", bucketId).replace("{fileId}", fileId);
        let payload = {};
        if (typeof bucketId === "undefined") {
          throw new AppwriteException('Missing required parameter: "bucketId"');
        }
        if (typeof fileId === "undefined") {
          throw new AppwriteException('Missing required parameter: "fileId"');
        }
        if (typeof width !== "undefined") {
          payload["width"] = width;
        }
        if (typeof height !== "undefined") {
          payload["height"] = height;
        }
        if (typeof gravity !== "undefined") {
          payload["gravity"] = gravity;
        }
        if (typeof quality !== "undefined") {
          payload["quality"] = quality;
        }
        if (typeof borderWidth !== "undefined") {
          payload["borderWidth"] = borderWidth;
        }
        if (typeof borderColor !== "undefined") {
          payload["borderColor"] = borderColor;
        }
        if (typeof borderRadius !== "undefined") {
          payload["borderRadius"] = borderRadius;
        }
        if (typeof opacity !== "undefined") {
          payload["opacity"] = opacity;
        }
        if (typeof rotation !== "undefined") {
          payload["rotation"] = rotation;
        }
        if (typeof background !== "undefined") {
          payload["background"] = background;
        }
        if (typeof output !== "undefined") {
          payload["output"] = output;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload, "arraybuffer");
      }
      /**
       * Get File for View
       *
       * Get a file content by its unique ID. This endpoint is similar to the
       * download method but returns with no  'Content-Disposition: attachment'
       * header.
       *
       * @param {string} bucketId
       * @param {string} fileId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getFileView(bucketId, fileId) {
        let path = "/storage/buckets/{bucketId}/files/{fileId}/view".replace("{bucketId}", bucketId).replace("{fileId}", fileId);
        let payload = {};
        if (typeof bucketId === "undefined") {
          throw new AppwriteException('Missing required parameter: "bucketId"');
        }
        if (typeof fileId === "undefined") {
          throw new AppwriteException('Missing required parameter: "fileId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload, "arraybuffer");
      }
    };
    module.exports = Storage;
  }
});

// node_modules/node-appwrite/lib/services/teams.js
var require_teams = __commonJS({
  "node_modules/node-appwrite/lib/services/teams.js"(exports, module) {
    var Service = require_service();
    var AppwriteException = require_exception();
    var InputFile = require_inputFile();
    var client = require_client();
    var Stream = require_stream();
    var { promisify } = require_util();
    var fs = require_fs();
    var Teams = class extends Service {
      constructor(client2) {
        super(client2);
      }
      /**
       * List Teams
       *
       * Get a list of all the teams in which the current user is a member. You can
       * use the parameters to filter your results.
       *
       * @param {string[]} queries
       * @param {string} search
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async list(queries, search) {
        let path = "/teams";
        let payload = {};
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        if (typeof search !== "undefined") {
          payload["search"] = search;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Team
       *
       * Create a new team. The user who creates the team will automatically be
       * assigned as the owner of the team. Only the users with the owner role can
       * invite new members, add new owners and delete or update the team.
       *
       * @param {string} teamId
       * @param {string} name
       * @param {string[]} roles
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async create(teamId, name, roles) {
        let path = "/teams";
        let payload = {};
        if (typeof teamId === "undefined") {
          throw new AppwriteException('Missing required parameter: "teamId"');
        }
        if (typeof name === "undefined") {
          throw new AppwriteException('Missing required parameter: "name"');
        }
        if (typeof teamId !== "undefined") {
          payload["teamId"] = teamId;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        if (typeof roles !== "undefined") {
          payload["roles"] = roles;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Team
       *
       * Get a team by its ID. All team members have read access for this resource.
       *
       * @param {string} teamId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async get(teamId) {
        let path = "/teams/{teamId}".replace("{teamId}", teamId);
        let payload = {};
        if (typeof teamId === "undefined") {
          throw new AppwriteException('Missing required parameter: "teamId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Name
       *
       * Update the team's name by its unique ID.
       *
       * @param {string} teamId
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateName(teamId, name) {
        let path = "/teams/{teamId}".replace("{teamId}", teamId);
        let payload = {};
        if (typeof teamId === "undefined") {
          throw new AppwriteException('Missing required parameter: "teamId"');
        }
        if (typeof name === "undefined") {
          throw new AppwriteException('Missing required parameter: "name"');
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("put", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete Team
       *
       * Delete a team using its ID. Only team members with the owner role can
       * delete the team.
       *
       * @param {string} teamId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async delete(teamId) {
        let path = "/teams/{teamId}".replace("{teamId}", teamId);
        let payload = {};
        if (typeof teamId === "undefined") {
          throw new AppwriteException('Missing required parameter: "teamId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List Team Memberships
       *
       * Use this endpoint to list a team's members using the team's ID. All team
       * members have read access to this endpoint.
       *
       * @param {string} teamId
       * @param {string[]} queries
       * @param {string} search
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listMemberships(teamId, queries, search) {
        let path = "/teams/{teamId}/memberships".replace("{teamId}", teamId);
        let payload = {};
        if (typeof teamId === "undefined") {
          throw new AppwriteException('Missing required parameter: "teamId"');
        }
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        if (typeof search !== "undefined") {
          payload["search"] = search;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create Team Membership
       *
       * Invite a new member to join your team. Provide an ID for existing users, or
       * invite unregistered users using an email or phone number. If initiated from
       * a Client SDK, Appwrite will send an email or sms with a link to join the
       * team to the invited user, and an account will be created for them if one
       * doesn't exist. If initiated from a Server SDK, the new member will be added
       * automatically to the team.
       * 
       * You only need to provide one of a user ID, email, or phone number. Appwrite
       * will prioritize accepting the user ID > email > phone number if you provide
       * more than one of these parameters.
       * 
       * Use the `url` parameter to redirect the user from the invitation email to
       * your app. After the user is redirected, use the [Update Team Membership
       * Status](/docs/client/teams#teamsUpdateMembershipStatus) endpoint to allow
       * the user to accept the invitation to the team. 
       * 
       * Please note that to avoid a [Redirect
       * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)
       * Appwrite will accept the only redirect URLs under the domains you have
       * added as a platform on the Appwrite Console.
       * 
       *
       * @param {string} teamId
       * @param {string[]} roles
       * @param {string} url
       * @param {string} email
       * @param {string} userId
       * @param {string} phone
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createMembership(teamId, roles, url, email, userId, phone, name) {
        let path = "/teams/{teamId}/memberships".replace("{teamId}", teamId);
        let payload = {};
        if (typeof teamId === "undefined") {
          throw new AppwriteException('Missing required parameter: "teamId"');
        }
        if (typeof roles === "undefined") {
          throw new AppwriteException('Missing required parameter: "roles"');
        }
        if (typeof url === "undefined") {
          throw new AppwriteException('Missing required parameter: "url"');
        }
        if (typeof email !== "undefined") {
          payload["email"] = email;
        }
        if (typeof userId !== "undefined") {
          payload["userId"] = userId;
        }
        if (typeof phone !== "undefined") {
          payload["phone"] = phone;
        }
        if (typeof roles !== "undefined") {
          payload["roles"] = roles;
        }
        if (typeof url !== "undefined") {
          payload["url"] = url;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Team Membership
       *
       * Get a team member by the membership unique id. All team members have read
       * access for this resource.
       *
       * @param {string} teamId
       * @param {string} membershipId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getMembership(teamId, membershipId) {
        let path = "/teams/{teamId}/memberships/{membershipId}".replace("{teamId}", teamId).replace("{membershipId}", membershipId);
        let payload = {};
        if (typeof teamId === "undefined") {
          throw new AppwriteException('Missing required parameter: "teamId"');
        }
        if (typeof membershipId === "undefined") {
          throw new AppwriteException('Missing required parameter: "membershipId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Membership Roles
       *
       * Modify the roles of a team member. Only team members with the owner role
       * have access to this endpoint. Learn more about [roles and
       * permissions](/docs/permissions).
       *
       * @param {string} teamId
       * @param {string} membershipId
       * @param {string[]} roles
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateMembershipRoles(teamId, membershipId, roles) {
        let path = "/teams/{teamId}/memberships/{membershipId}".replace("{teamId}", teamId).replace("{membershipId}", membershipId);
        let payload = {};
        if (typeof teamId === "undefined") {
          throw new AppwriteException('Missing required parameter: "teamId"');
        }
        if (typeof membershipId === "undefined") {
          throw new AppwriteException('Missing required parameter: "membershipId"');
        }
        if (typeof roles === "undefined") {
          throw new AppwriteException('Missing required parameter: "roles"');
        }
        if (typeof roles !== "undefined") {
          payload["roles"] = roles;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete Team Membership
       *
       * This endpoint allows a user to leave a team or for a team owner to delete
       * the membership of any other team member. You can also use this endpoint to
       * delete a user membership even if it is not accepted.
       *
       * @param {string} teamId
       * @param {string} membershipId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async deleteMembership(teamId, membershipId) {
        let path = "/teams/{teamId}/memberships/{membershipId}".replace("{teamId}", teamId).replace("{membershipId}", membershipId);
        let payload = {};
        if (typeof teamId === "undefined") {
          throw new AppwriteException('Missing required parameter: "teamId"');
        }
        if (typeof membershipId === "undefined") {
          throw new AppwriteException('Missing required parameter: "membershipId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Team Membership Status
       *
       * Use this endpoint to allow a user to accept an invitation to join a team
       * after being redirected back to your app from the invitation email received
       * by the user.
       * 
       * If the request is successful, a session for the user is automatically
       * created.
       * 
       *
       * @param {string} teamId
       * @param {string} membershipId
       * @param {string} userId
       * @param {string} secret
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateMembershipStatus(teamId, membershipId, userId, secret) {
        let path = "/teams/{teamId}/memberships/{membershipId}/status".replace("{teamId}", teamId).replace("{membershipId}", membershipId);
        let payload = {};
        if (typeof teamId === "undefined") {
          throw new AppwriteException('Missing required parameter: "teamId"');
        }
        if (typeof membershipId === "undefined") {
          throw new AppwriteException('Missing required parameter: "membershipId"');
        }
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof secret === "undefined") {
          throw new AppwriteException('Missing required parameter: "secret"');
        }
        if (typeof userId !== "undefined") {
          payload["userId"] = userId;
        }
        if (typeof secret !== "undefined") {
          payload["secret"] = secret;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get Team Preferences
       *
       * Get the team's shared preferences by its unique ID. If a preference doesn't
       * need to be shared by all team members, prefer storing them in [user
       * preferences](/docs/client/account#accountGetPrefs).
       *
       * @param {string} teamId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getPrefs(teamId) {
        let path = "/teams/{teamId}/prefs".replace("{teamId}", teamId);
        let payload = {};
        if (typeof teamId === "undefined") {
          throw new AppwriteException('Missing required parameter: "teamId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Preferences
       *
       * Update the team's preferences by its unique ID. The object you pass is
       * stored as is and replaces any previous value. The maximum allowed prefs
       * size is 64kB and throws an error if exceeded.
       *
       * @param {string} teamId
       * @param {object} prefs
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updatePrefs(teamId, prefs) {
        let path = "/teams/{teamId}/prefs".replace("{teamId}", teamId);
        let payload = {};
        if (typeof teamId === "undefined") {
          throw new AppwriteException('Missing required parameter: "teamId"');
        }
        if (typeof prefs === "undefined") {
          throw new AppwriteException('Missing required parameter: "prefs"');
        }
        if (typeof prefs !== "undefined") {
          payload["prefs"] = prefs;
        }
        return await this.client.call("put", path, {
          "content-type": "application/json"
        }, payload);
      }
    };
    module.exports = Teams;
  }
});

// node_modules/node-appwrite/lib/services/users.js
var require_users = __commonJS({
  "node_modules/node-appwrite/lib/services/users.js"(exports, module) {
    var Service = require_service();
    var AppwriteException = require_exception();
    var InputFile = require_inputFile();
    var client = require_client();
    var Stream = require_stream();
    var { promisify } = require_util();
    var fs = require_fs();
    var Users = class extends Service {
      constructor(client2) {
        super(client2);
      }
      /**
       * List Users
       *
       * Get a list of all the project's users. You can use the query params to
       * filter your results.
       *
       * @param {string[]} queries
       * @param {string} search
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async list(queries, search) {
        let path = "/users";
        let payload = {};
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        if (typeof search !== "undefined") {
          payload["search"] = search;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create User
       *
       * Create a new user.
       *
       * @param {string} userId
       * @param {string} email
       * @param {string} phone
       * @param {string} password
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async create(userId, email, phone, password, name) {
        let path = "/users";
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof userId !== "undefined") {
          payload["userId"] = userId;
        }
        if (typeof email !== "undefined") {
          payload["email"] = email;
        }
        if (typeof phone !== "undefined") {
          payload["phone"] = phone;
        }
        if (typeof password !== "undefined") {
          payload["password"] = password;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create User with Argon2 Password
       *
       * Create a new user. Password provided must be hashed with the
       * [Argon2](https://en.wikipedia.org/wiki/Argon2) algorithm. Use the [POST
       * /users](/docs/server/users#usersCreate) endpoint to create users with a
       * plain text password.
       *
       * @param {string} userId
       * @param {string} email
       * @param {string} password
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createArgon2User(userId, email, password, name) {
        let path = "/users/argon2";
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof email === "undefined") {
          throw new AppwriteException('Missing required parameter: "email"');
        }
        if (typeof password === "undefined") {
          throw new AppwriteException('Missing required parameter: "password"');
        }
        if (typeof userId !== "undefined") {
          payload["userId"] = userId;
        }
        if (typeof email !== "undefined") {
          payload["email"] = email;
        }
        if (typeof password !== "undefined") {
          payload["password"] = password;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create User with Bcrypt Password
       *
       * Create a new user. Password provided must be hashed with the
       * [Bcrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm. Use the [POST
       * /users](/docs/server/users#usersCreate) endpoint to create users with a
       * plain text password.
       *
       * @param {string} userId
       * @param {string} email
       * @param {string} password
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createBcryptUser(userId, email, password, name) {
        let path = "/users/bcrypt";
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof email === "undefined") {
          throw new AppwriteException('Missing required parameter: "email"');
        }
        if (typeof password === "undefined") {
          throw new AppwriteException('Missing required parameter: "password"');
        }
        if (typeof userId !== "undefined") {
          payload["userId"] = userId;
        }
        if (typeof email !== "undefined") {
          payload["email"] = email;
        }
        if (typeof password !== "undefined") {
          payload["password"] = password;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create User with MD5 Password
       *
       * Create a new user. Password provided must be hashed with the
       * [MD5](https://en.wikipedia.org/wiki/MD5) algorithm. Use the [POST
       * /users](/docs/server/users#usersCreate) endpoint to create users with a
       * plain text password.
       *
       * @param {string} userId
       * @param {string} email
       * @param {string} password
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createMD5User(userId, email, password, name) {
        let path = "/users/md5";
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof email === "undefined") {
          throw new AppwriteException('Missing required parameter: "email"');
        }
        if (typeof password === "undefined") {
          throw new AppwriteException('Missing required parameter: "password"');
        }
        if (typeof userId !== "undefined") {
          payload["userId"] = userId;
        }
        if (typeof email !== "undefined") {
          payload["email"] = email;
        }
        if (typeof password !== "undefined") {
          payload["password"] = password;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create User with PHPass Password
       *
       * Create a new user. Password provided must be hashed with the
       * [PHPass](https://www.openwall.com/phpass/) algorithm. Use the [POST
       * /users](/docs/server/users#usersCreate) endpoint to create users with a
       * plain text password.
       *
       * @param {string} userId
       * @param {string} email
       * @param {string} password
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createPHPassUser(userId, email, password, name) {
        let path = "/users/phpass";
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof email === "undefined") {
          throw new AppwriteException('Missing required parameter: "email"');
        }
        if (typeof password === "undefined") {
          throw new AppwriteException('Missing required parameter: "password"');
        }
        if (typeof userId !== "undefined") {
          payload["userId"] = userId;
        }
        if (typeof email !== "undefined") {
          payload["email"] = email;
        }
        if (typeof password !== "undefined") {
          payload["password"] = password;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create User with Scrypt Password
       *
       * Create a new user. Password provided must be hashed with the
       * [Scrypt](https://github.com/Tarsnap/scrypt) algorithm. Use the [POST
       * /users](/docs/server/users#usersCreate) endpoint to create users with a
       * plain text password.
       *
       * @param {string} userId
       * @param {string} email
       * @param {string} password
       * @param {string} passwordSalt
       * @param {number} passwordCpu
       * @param {number} passwordMemory
       * @param {number} passwordParallel
       * @param {number} passwordLength
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createScryptUser(userId, email, password, passwordSalt, passwordCpu, passwordMemory, passwordParallel, passwordLength, name) {
        let path = "/users/scrypt";
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof email === "undefined") {
          throw new AppwriteException('Missing required parameter: "email"');
        }
        if (typeof password === "undefined") {
          throw new AppwriteException('Missing required parameter: "password"');
        }
        if (typeof passwordSalt === "undefined") {
          throw new AppwriteException('Missing required parameter: "passwordSalt"');
        }
        if (typeof passwordCpu === "undefined") {
          throw new AppwriteException('Missing required parameter: "passwordCpu"');
        }
        if (typeof passwordMemory === "undefined") {
          throw new AppwriteException('Missing required parameter: "passwordMemory"');
        }
        if (typeof passwordParallel === "undefined") {
          throw new AppwriteException('Missing required parameter: "passwordParallel"');
        }
        if (typeof passwordLength === "undefined") {
          throw new AppwriteException('Missing required parameter: "passwordLength"');
        }
        if (typeof userId !== "undefined") {
          payload["userId"] = userId;
        }
        if (typeof email !== "undefined") {
          payload["email"] = email;
        }
        if (typeof password !== "undefined") {
          payload["password"] = password;
        }
        if (typeof passwordSalt !== "undefined") {
          payload["passwordSalt"] = passwordSalt;
        }
        if (typeof passwordCpu !== "undefined") {
          payload["passwordCpu"] = passwordCpu;
        }
        if (typeof passwordMemory !== "undefined") {
          payload["passwordMemory"] = passwordMemory;
        }
        if (typeof passwordParallel !== "undefined") {
          payload["passwordParallel"] = passwordParallel;
        }
        if (typeof passwordLength !== "undefined") {
          payload["passwordLength"] = passwordLength;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create User with Scrypt Modified Password
       *
       * Create a new user. Password provided must be hashed with the [Scrypt
       * Modified](https://gist.github.com/Meldiron/eecf84a0225eccb5a378d45bb27462cc)
       * algorithm. Use the [POST /users](/docs/server/users#usersCreate) endpoint
       * to create users with a plain text password.
       *
       * @param {string} userId
       * @param {string} email
       * @param {string} password
       * @param {string} passwordSalt
       * @param {string} passwordSaltSeparator
       * @param {string} passwordSignerKey
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createScryptModifiedUser(userId, email, password, passwordSalt, passwordSaltSeparator, passwordSignerKey, name) {
        let path = "/users/scrypt-modified";
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof email === "undefined") {
          throw new AppwriteException('Missing required parameter: "email"');
        }
        if (typeof password === "undefined") {
          throw new AppwriteException('Missing required parameter: "password"');
        }
        if (typeof passwordSalt === "undefined") {
          throw new AppwriteException('Missing required parameter: "passwordSalt"');
        }
        if (typeof passwordSaltSeparator === "undefined") {
          throw new AppwriteException('Missing required parameter: "passwordSaltSeparator"');
        }
        if (typeof passwordSignerKey === "undefined") {
          throw new AppwriteException('Missing required parameter: "passwordSignerKey"');
        }
        if (typeof userId !== "undefined") {
          payload["userId"] = userId;
        }
        if (typeof email !== "undefined") {
          payload["email"] = email;
        }
        if (typeof password !== "undefined") {
          payload["password"] = password;
        }
        if (typeof passwordSalt !== "undefined") {
          payload["passwordSalt"] = passwordSalt;
        }
        if (typeof passwordSaltSeparator !== "undefined") {
          payload["passwordSaltSeparator"] = passwordSaltSeparator;
        }
        if (typeof passwordSignerKey !== "undefined") {
          payload["passwordSignerKey"] = passwordSignerKey;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Create User with SHA Password
       *
       * Create a new user. Password provided must be hashed with the
       * [SHA](https://en.wikipedia.org/wiki/Secure_Hash_Algorithm) algorithm. Use
       * the [POST /users](/docs/server/users#usersCreate) endpoint to create users
       * with a plain text password.
       *
       * @param {string} userId
       * @param {string} email
       * @param {string} password
       * @param {string} passwordVersion
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async createSHAUser(userId, email, password, passwordVersion, name) {
        let path = "/users/sha";
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof email === "undefined") {
          throw new AppwriteException('Missing required parameter: "email"');
        }
        if (typeof password === "undefined") {
          throw new AppwriteException('Missing required parameter: "password"');
        }
        if (typeof userId !== "undefined") {
          payload["userId"] = userId;
        }
        if (typeof email !== "undefined") {
          payload["email"] = email;
        }
        if (typeof password !== "undefined") {
          payload["password"] = password;
        }
        if (typeof passwordVersion !== "undefined") {
          payload["passwordVersion"] = passwordVersion;
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("post", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get User
       *
       * Get a user by its unique ID.
       *
       * @param {string} userId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async get(userId) {
        let path = "/users/{userId}".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete User
       *
       * Delete a user by its unique ID, thereby releasing it's ID. Since ID is
       * released and can be reused, all user-related resources like documents or
       * storage files should be deleted before user deletion. If you want to keep
       * ID reserved, use the [updateStatus](/docs/server/users#usersUpdateStatus)
       * endpoint instead.
       *
       * @param {string} userId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async delete(userId) {
        let path = "/users/{userId}".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Email
       *
       * Update the user email by its unique ID.
       *
       * @param {string} userId
       * @param {string} email
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateEmail(userId, email) {
        let path = "/users/{userId}/email".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof email === "undefined") {
          throw new AppwriteException('Missing required parameter: "email"');
        }
        if (typeof email !== "undefined") {
          payload["email"] = email;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List User Logs
       *
       * Get the user activity logs list by its unique ID.
       *
       * @param {string} userId
       * @param {string[]} queries
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listLogs(userId, queries) {
        let path = "/users/{userId}/logs".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof queries !== "undefined") {
          payload["queries"] = queries;
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List User Memberships
       *
       * Get the user membership list by its unique ID.
       *
       * @param {string} userId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listMemberships(userId) {
        let path = "/users/{userId}/memberships".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Name
       *
       * Update the user name by its unique ID.
       *
       * @param {string} userId
       * @param {string} name
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateName(userId, name) {
        let path = "/users/{userId}/name".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof name === "undefined") {
          throw new AppwriteException('Missing required parameter: "name"');
        }
        if (typeof name !== "undefined") {
          payload["name"] = name;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Password
       *
       * Update the user password by its unique ID.
       *
       * @param {string} userId
       * @param {string} password
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updatePassword(userId, password) {
        let path = "/users/{userId}/password".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof password === "undefined") {
          throw new AppwriteException('Missing required parameter: "password"');
        }
        if (typeof password !== "undefined") {
          payload["password"] = password;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Phone
       *
       * Update the user phone by its unique ID.
       *
       * @param {string} userId
       * @param {string} number
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updatePhone(userId, number) {
        let path = "/users/{userId}/phone".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof number === "undefined") {
          throw new AppwriteException('Missing required parameter: "number"');
        }
        if (typeof number !== "undefined") {
          payload["number"] = number;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Get User Preferences
       *
       * Get the user preferences by its unique ID.
       *
       * @param {string} userId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async getPrefs(userId) {
        let path = "/users/{userId}/prefs".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update User Preferences
       *
       * Update the user preferences by its unique ID. The object you pass is stored
       * as is, and replaces any previous value. The maximum allowed prefs size is
       * 64kB and throws error if exceeded.
       *
       * @param {string} userId
       * @param {object} prefs
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updatePrefs(userId, prefs) {
        let path = "/users/{userId}/prefs".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof prefs === "undefined") {
          throw new AppwriteException('Missing required parameter: "prefs"');
        }
        if (typeof prefs !== "undefined") {
          payload["prefs"] = prefs;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * List User Sessions
       *
       * Get the user sessions list by its unique ID.
       *
       * @param {string} userId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async listSessions(userId) {
        let path = "/users/{userId}/sessions".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        return await this.client.call("get", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete User Sessions
       *
       * Delete all user's sessions by using the user's unique ID.
       *
       * @param {string} userId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async deleteSessions(userId) {
        let path = "/users/{userId}/sessions".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Delete User Session
       *
       * Delete a user sessions by its unique ID.
       *
       * @param {string} userId
       * @param {string} sessionId
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async deleteSession(userId, sessionId) {
        let path = "/users/{userId}/sessions/{sessionId}".replace("{userId}", userId).replace("{sessionId}", sessionId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof sessionId === "undefined") {
          throw new AppwriteException('Missing required parameter: "sessionId"');
        }
        return await this.client.call("delete", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update User Status
       *
       * Update the user status by its unique ID. Use this endpoint as an
       * alternative to deleting a user if you want to keep user's ID reserved.
       *
       * @param {string} userId
       * @param {boolean} status
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateStatus(userId, status) {
        let path = "/users/{userId}/status".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof status === "undefined") {
          throw new AppwriteException('Missing required parameter: "status"');
        }
        if (typeof status !== "undefined") {
          payload["status"] = status;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Email Verification
       *
       * Update the user email verification status by its unique ID.
       *
       * @param {string} userId
       * @param {boolean} emailVerification
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updateEmailVerification(userId, emailVerification) {
        let path = "/users/{userId}/verification".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof emailVerification === "undefined") {
          throw new AppwriteException('Missing required parameter: "emailVerification"');
        }
        if (typeof emailVerification !== "undefined") {
          payload["emailVerification"] = emailVerification;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
      /**
       * Update Phone Verification
       *
       * Update the user phone verification status by its unique ID.
       *
       * @param {string} userId
       * @param {boolean} phoneVerification
       * @throws {AppwriteException}
       * @returns {Promise}
       */
      async updatePhoneVerification(userId, phoneVerification) {
        let path = "/users/{userId}/verification/phone".replace("{userId}", userId);
        let payload = {};
        if (typeof userId === "undefined") {
          throw new AppwriteException('Missing required parameter: "userId"');
        }
        if (typeof phoneVerification === "undefined") {
          throw new AppwriteException('Missing required parameter: "phoneVerification"');
        }
        if (typeof phoneVerification !== "undefined") {
          payload["phoneVerification"] = phoneVerification;
        }
        return await this.client.call("patch", path, {
          "content-type": "application/json"
        }, payload);
      }
    };
    module.exports = Users;
  }
});

// node_modules/node-appwrite/index.js
var require_node_appwrite = __commonJS({
  "node_modules/node-appwrite/index.js"(exports, module) {
    var Client = require_client();
    var Query = require_query();
    var Permission = require_permission();
    var Role = require_role();
    var ID = require_id();
    var InputFile = require_inputFile();
    var AppwriteException = require_exception();
    var Account = require_account();
    var Avatars = require_avatars();
    var Databases = require_databases();
    var Functions = require_functions();
    var Graphql = require_graphql();
    var Health = require_health();
    var Locale = require_locale();
    var Storage = require_storage();
    var Teams = require_teams();
    var Users = require_users();
    module.exports = {
      Client,
      Query,
      Permission,
      Role,
      ID,
      InputFile,
      AppwriteException,
      Account,
      Avatars,
      Databases,
      Functions,
      Graphql,
      Health,
      Locale,
      Storage,
      Teams,
      Users
    };
  }
});
export default require_node_appwrite();
//# sourceMappingURL=node-appwrite.js.map
